ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"CapSense_CSHL.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.CapSense_BaseInit,"ax",%progbits
  20              		.align	2
  21              		.global	CapSense_BaseInit
  22              		.thumb
  23              		.thumb_func
  24              		.type	CapSense_BaseInit, %function
  25              	CapSense_BaseInit:
  26              	.LFB0:
  27              		.file 1 "Generated_Source\\PSoC5\\CapSense_CSHL.c"
   1:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/CapSense_CSHL.c **** * File Name: CapSense_CSHL.c
   3:Generated_Source\PSoC5/CapSense_CSHL.c **** * Version 3.50
   4:Generated_Source\PSoC5/CapSense_CSHL.c **** *
   5:Generated_Source\PSoC5/CapSense_CSHL.c **** * Description:
   6:Generated_Source\PSoC5/CapSense_CSHL.c **** *  This file provides the source code to the High Level APIs for the CapSesne
   7:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CSD component.
   8:Generated_Source\PSoC5/CapSense_CSHL.c **** *
   9:Generated_Source\PSoC5/CapSense_CSHL.c **** * Note:
  10:Generated_Source\PSoC5/CapSense_CSHL.c **** *
  11:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
  12:Generated_Source\PSoC5/CapSense_CSHL.c **** * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC5/CapSense_CSHL.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC5/CapSense_CSHL.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC5/CapSense_CSHL.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
  17:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  18:Generated_Source\PSoC5/CapSense_CSHL.c **** #include "CapSense_CSHL.h"
  19:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  20:Generated_Source\PSoC5/CapSense_CSHL.c **** /* Storage of filters data */
  21:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
  22:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) )
  23:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  24:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_rawFilterData1[CapSense_TOTAL_SENSOR_COUNT];
  25:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_rawFilterData2[CapSense_TOTAL_SENSOR_COUNT];
  26:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  27:Generated_Source\PSoC5/CapSense_CSHL.c **** #elif ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER)   | \
  28:Generated_Source\PSoC5/CapSense_CSHL.c ****         (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER)   | \
  29:Generated_Source\PSoC5/CapSense_CSHL.c ****         (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) | \
  30:Generated_Source\PSoC5/CapSense_CSHL.c ****         (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)   | \
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 2


  31:Generated_Source\PSoC5/CapSense_CSHL.c ****         (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER) )
  32:Generated_Source\PSoC5/CapSense_CSHL.c ****         
  33:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_rawFilterData1[CapSense_TOTAL_SENSOR_COUNT];
  34:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  35:Generated_Source\PSoC5/CapSense_CSHL.c **** #else
  36:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* No Raw filters */
  37:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif  /* ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) || \
  38:Generated_Source\PSoC5/CapSense_CSHL.c ****         *    (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) )
  39:Generated_Source\PSoC5/CapSense_CSHL.c ****         */
  40:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  41:Generated_Source\PSoC5/CapSense_CSHL.c **** uint16 CapSense_sensorBaseline[CapSense_TOTAL_SENSOR_COUNT];
  42:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_sensorBaselineLow[CapSense_TOTAL_SENSOR_COUNT];
  43:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_sensorSignal[CapSense_TOTAL_SENSOR_COUNT];
  44:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_sensorOnMask[(((CapSense_TOTAL_SENSOR_COUNT - 1u) / 8u) + 1u)];
  45:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  46:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_lowBaselineResetCnt[CapSense_TOTAL_SENSOR_COUNT];
  47:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  48:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_fingerThreshold[] = {
  49:Generated_Source\PSoC5/CapSense_CSHL.c ****     100u, 100u, 
  50:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  51:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  52:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_noiseThreshold[] = {
  53:Generated_Source\PSoC5/CapSense_CSHL.c ****     20u, 20u, 
  54:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  55:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  56:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_hysteresis[] = {
  57:Generated_Source\PSoC5/CapSense_CSHL.c ****     10u, 10u, 
  58:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  59:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  60:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_debounce[] = {
  61:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, 1u, 
  62:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  63:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  64:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_debounceCounter[] = {
  65:Generated_Source\PSoC5/CapSense_CSHL.c ****     0u, 0u, 0u, 
  66:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  67:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  68:Generated_Source\PSoC5/CapSense_CSHL.c **** const uint8 CYCODE CapSense_rawDataIndex[] = {
  69:Generated_Source\PSoC5/CapSense_CSHL.c ****     0u, /* Button0__BTN */
  70:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button1__BTN */
  71:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  72:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  73:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  74:Generated_Source\PSoC5/CapSense_CSHL.c **** const uint8 CYCODE CapSense_numberOfSensors[] = {
  75:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button0__BTN */
  76:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button1__BTN */
  77:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  78:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  79:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  80:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  81:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  82:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  83:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
  84:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_BaseInit
  85:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
  86:Generated_Source\PSoC5/CapSense_CSHL.c **** *
  87:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 3


  88:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Loads the CapSense_sensorBaseline[sensor] array element with an 
  89:Generated_Source\PSoC5/CapSense_CSHL.c **** *  initial value which is equal to raw count value. 
  90:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Resets to zero CapSense_sensorBaselineLow[sensor] and 
  91:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorSignal[sensor] array element.
  92:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Loads CapSense_debounceCounter[sensor] array element with initial 
  93:Generated_Source\PSoC5/CapSense_CSHL.c **** *  value equal CapSense_debounce[].
  94:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Loads the CapSense_rawFilterData2[sensor] and 
  95:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData2[sensor] array element with an 
  96:Generated_Source\PSoC5/CapSense_CSHL.c **** *  initial value which is equal raw count value if raw data filter is enabled.
  97:Generated_Source\PSoC5/CapSense_CSHL.c **** *
  98:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
  99:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensor:  Sensor number.
 100:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 101:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 102:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 103:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 104:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 105:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaseline[]    - used to store baseline value.
 106:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaselineLow[] - used to store fraction byte of 
 107:Generated_Source\PSoC5/CapSense_CSHL.c **** *  baseline value.
 108:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorSignal[]      - used to store diffence between 
 109:Generated_Source\PSoC5/CapSense_CSHL.c **** *  current value of raw data and previous value of baseline.
 110:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_debounceCounter[]   - used to store current debounce 
 111:Generated_Source\PSoC5/CapSense_CSHL.c **** *  counter of sensor. Widget which has this parameter are buttons, matrix 
 112:Generated_Source\PSoC5/CapSense_CSHL.c **** *  buttons, proximity, guard. All other widgets haven't debounce parameter
 113:Generated_Source\PSoC5/CapSense_CSHL.c **** *  and use the last element of this array with value 0 (it means no debounce).
 114:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData1[]    - used to store previous sample of 
 115:Generated_Source\PSoC5/CapSense_CSHL.c **** *  any enabled raw data filter.
 116:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData2[]    - used to store before previous sample
 117:Generated_Source\PSoC5/CapSense_CSHL.c **** *  of enabled raw data filter. Only required for median or average filters.
 118:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 119:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 120:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 121:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 122:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 123:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_BaseInit(uint8 sensor) 
 124:Generated_Source\PSoC5/CapSense_CSHL.c **** {
  28              		.loc 1 124 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 10B4     		push	{r4}
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 4, -4
 125:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if ((CapSense_TOTAL_BUTTONS_COUNT) || (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) || \
 126:Generated_Source\PSoC5/CapSense_CSHL.c ****          (CapSense_TOTAL_GENERICS_COUNT))
 127:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 widget = CapSense_widgetNumber[sensor];
  37              		.loc 1 127 0
  38 0002 0B4B     		ldr	r3, .L3
  39 0004 1A5C     		ldrb	r2, [r3, r0]	@ zero_extendqisi2
  40              	.LVL1:
 128:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif /* ((CapSense_TOTAL_MATRIX_BUTTONS_COUNT) || (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)) */
 129:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 130:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)
 131:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 debounceIndex;
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 4


 132:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) */
 133:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 134:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 135:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Exclude generic widget */
 136:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(widget < CapSense_END_OF_WIDGETS_INDEX)
 137:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 138:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 139:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 140:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Initialize Baseline */
 141:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_sensorBaseline[sensor] = CapSense_sensorRaw[sensor];
  41              		.loc 1 141 0
  42 0006 0B4B     		ldr	r3, .L3+4
  43 0008 33F81030 		ldrh	r3, [r3, r0, lsl #1]
  44 000c 0A49     		ldr	r1, .L3+8
  45 000e 21F81030 		strh	r3, [r1, r0, lsl #1]	@ movhi
 142:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_sensorBaselineLow[sensor] = 0u;
  46              		.loc 1 142 0
  47 0012 0021     		movs	r1, #0
  48 0014 094C     		ldr	r4, .L3+12
  49 0016 2154     		strb	r1, [r4, r0]
 143:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_sensorSignal[sensor] = 0u;
  50              		.loc 1 143 0
  51 0018 094C     		ldr	r4, .L3+16
  52 001a 2154     		strb	r1, [r4, r0]
 144:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 145:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_debounceCounter[widget] =  CapSense_debounce[widget];
  53              		.loc 1 145 0
  54 001c 0949     		ldr	r1, .L3+20
  55 001e 8C5C     		ldrb	r4, [r1, r2]	@ zero_extendqisi2
  56 0020 0949     		ldr	r1, .L3+24
  57 0022 8C54     		strb	r4, [r1, r2]
 146:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 147:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 148:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if ((CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) |\
 149:Generated_Source\PSoC5/CapSense_CSHL.c ****          (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER))
 150:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 151:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = CapSense_sensorRaw[sensor];
 152:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData2[sensor] = CapSense_sensorRaw[sensor];
 153:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 154:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif ((CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) |\
 155:Generated_Source\PSoC5/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER) |\
 156:Generated_Source\PSoC5/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) |\
 157:Generated_Source\PSoC5/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER) |\
 158:Generated_Source\PSoC5/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER))
 159:Generated_Source\PSoC5/CapSense_CSHL.c ****             
 160:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = CapSense_sensorRaw[sensor];
  58              		.loc 1 160 0
  59 0024 094A     		ldr	r2, .L3+28
  60              	.LVL2:
  61 0026 22F81030 		strh	r3, [r2, r0, lsl #1]	@ movhi
 161:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 162:Generated_Source\PSoC5/CapSense_CSHL.c ****     #else
 163:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* No Raw filters */
 164:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* ((CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
 165:Generated_Source\PSoC5/CapSense_CSHL.c ****             *   (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER))
 166:Generated_Source\PSoC5/CapSense_CSHL.c ****             */
 167:Generated_Source\PSoC5/CapSense_CSHL.c ****     
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 5


 168:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 169:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Exclude generic widget */
 170:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 171:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 172:Generated_Source\PSoC5/CapSense_CSHL.c **** }
  62              		.loc 1 172 0
  63 002a 10BC     		pop	{r4}
  64              		.cfi_restore 4
  65              		.cfi_def_cfa_offset 0
  66 002c 7047     		bx	lr
  67              	.L4:
  68 002e 00BF     		.align	2
  69              	.L3:
  70 0030 00000000 		.word	CapSense_widgetNumber
  71 0034 00000000 		.word	CapSense_sensorRaw
  72 0038 00000000 		.word	CapSense_sensorBaseline
  73 003c 00000000 		.word	CapSense_sensorBaselineLow
  74 0040 00000000 		.word	CapSense_sensorSignal
  75 0044 00000000 		.word	.LANCHOR0
  76 0048 00000000 		.word	.LANCHOR1
  77 004c 00000000 		.word	CapSense_rawFilterData1
  78              		.cfi_endproc
  79              	.LFE0:
  80              		.size	CapSense_BaseInit, .-CapSense_BaseInit
  81              		.section	.text.CapSense_InitializeSensorBaseline,"ax",%progbits
  82              		.align	2
  83              		.global	CapSense_InitializeSensorBaseline
  84              		.thumb
  85              		.thumb_func
  86              		.type	CapSense_InitializeSensorBaseline, %function
  87              	CapSense_InitializeSensorBaseline:
  88              	.LFB1:
 173:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 174:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 175:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 176:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_InitializeSensorBaseline
 177:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 178:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 179:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 180:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Loads the CapSense_sensorBaseline[sensor] array element with an 
 181:Generated_Source\PSoC5/CapSense_CSHL.c **** *  initial value by scanning the selected sensor (one channel design) or pair 
 182:Generated_Source\PSoC5/CapSense_CSHL.c **** *  of sensors (two channels designs). The raw count value is copied into the 
 183:Generated_Source\PSoC5/CapSense_CSHL.c **** *  baseline array for each sensor. The raw data filters are initialized if 
 184:Generated_Source\PSoC5/CapSense_CSHL.c **** *  enabled.
 185:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 186:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 187:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensor:  Sensor number.
 188:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 189:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 190:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 191:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 192:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 193:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 194:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 195:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 196:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_InitializeSensorBaseline(uint8 sensor)
 197:Generated_Source\PSoC5/CapSense_CSHL.c ****                           
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 6


 198:Generated_Source\PSoC5/CapSense_CSHL.c **** {
  89              		.loc 1 198 0
  90              		.cfi_startproc
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 0, uses_anonymous_args = 0
  93              	.LVL3:
  94 0000 10B5     		push	{r4, lr}
  95              		.cfi_def_cfa_offset 8
  96              		.cfi_offset 4, -8
  97              		.cfi_offset 14, -4
  98 0002 0446     		mov	r4, r0
 199:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Scan sensor */
 200:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_ScanSensor(sensor);
  99              		.loc 1 200 0
 100 0004 FFF7FEFF 		bl	CapSense_ScanSensor
 101              	.LVL4:
 102              	.L6:
 201:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(CapSense_IsBusy() != 0u)
 103              		.loc 1 201 0 discriminator 1
 104 0008 FFF7FEFF 		bl	CapSense_IsBusy
 105              	.LVL5:
 106 000c 0028     		cmp	r0, #0
 107 000e FBD1     		bne	.L6
 202:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 203:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Wait while busy */
 204:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 205:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 206:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
 207:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Initialize Baseline, Signal and debounce counters */       
 208:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_BaseInit(sensor);
 108              		.loc 1 208 0
 109 0010 2046     		mov	r0, r4
 110 0012 FFF7FEFF 		bl	CapSense_BaseInit
 111              	.LVL6:
 112 0016 10BD     		pop	{r4, pc}
 113              		.cfi_endproc
 114              	.LFE1:
 115              		.size	CapSense_InitializeSensorBaseline, .-CapSense_InitializeSensorBaseline
 116              		.section	.text.CapSense_InitializeAllBaselines,"ax",%progbits
 117              		.align	2
 118              		.global	CapSense_InitializeAllBaselines
 119              		.thumb
 120              		.thumb_func
 121              		.type	CapSense_InitializeAllBaselines, %function
 122              	CapSense_InitializeAllBaselines:
 123              	.LFB2:
 209:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 210:Generated_Source\PSoC5/CapSense_CSHL.c ****     #else
 211:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 212:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(sensor < CapSense_TOTAL_SENSOR_COUNT__CH0)
 213:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 214:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Initialize Baseline, Signal and debounce counters */ 
 215:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_BaseInit(sensor);
 216:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 217:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 218:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(sensor < CapSense_TOTAL_SENSOR_COUNT__CH1)
 219:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 7


 220:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Initialize Baseline, Signal and debounce counters */
 221:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_BaseInit(sensor + CapSense_TOTAL_SENSOR_COUNT__CH0);
 222:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 223:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 224:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN) */
 225:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 226:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 227:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 228:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 229:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_InitializeAllBaselines
 230:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 231:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 232:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 233:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Uses the CapSense_InitializeSensorBaseline function to loads the 
 234:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaseline[] array with an initial values by scanning 
 235:Generated_Source\PSoC5/CapSense_CSHL.c **** *  all sensors. The raw count values are copied into the baseline array for 
 236:Generated_Source\PSoC5/CapSense_CSHL.c **** *  all sensors. The raw data filters are initialized if enabled.
 237:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 238:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 239:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 240:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 241:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 242:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 243:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 244:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 245:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 246:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 247:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 248:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_InitializeAllBaselines(void)
 249:Generated_Source\PSoC5/CapSense_CSHL.c ****                           
 250:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 124              		.loc 1 250 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128 0000 10B5     		push	{r4, lr}
 129              		.cfi_def_cfa_offset 8
 130              		.cfi_offset 4, -8
 131              		.cfi_offset 14, -4
 132              	.LVL7:
 251:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 i;
 252:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 253:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* The baseline initialize by sensor of sensor pair */
 254:Generated_Source\PSoC5/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_SCANSLOT_COUNT; i++)
 133              		.loc 1 254 0
 134 0002 0024     		movs	r4, #0
 135 0004 04E0     		b	.L9
 136              	.LVL8:
 137              	.L10:
 255:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 256:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_InitializeSensorBaseline(i);
 138              		.loc 1 256 0 discriminator 3
 139 0006 2046     		mov	r0, r4
 140 0008 FFF7FEFF 		bl	CapSense_InitializeSensorBaseline
 141              	.LVL9:
 254:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 142              		.loc 1 254 0 discriminator 3
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 8


 143 000c 0134     		adds	r4, r4, #1
 144              	.LVL10:
 145 000e E4B2     		uxtb	r4, r4
 146              	.LVL11:
 147              	.L9:
 254:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 148              		.loc 1 254 0 is_stmt 0 discriminator 1
 149 0010 012C     		cmp	r4, #1
 150 0012 F8D9     		bls	.L10
 257:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 258:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 151              		.loc 1 258 0 is_stmt 1
 152 0014 10BD     		pop	{r4, pc}
 153              		.cfi_endproc
 154              	.LFE2:
 155              		.size	CapSense_InitializeAllBaselines, .-CapSense_InitializeAllBaselines
 156 0016 00BF     		.section	.text.CapSense_InitializeEnabledBaselines,"ax",%progbits
 157              		.align	2
 158              		.global	CapSense_InitializeEnabledBaselines
 159              		.thumb
 160              		.thumb_func
 161              		.type	CapSense_InitializeEnabledBaselines, %function
 162              	CapSense_InitializeEnabledBaselines:
 163              	.LFB3:
 259:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 260:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 261:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 262:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_InitializeEnabledBaselines
 263:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 264:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 265:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 266:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Scans all enabled widgets and the raw count values are copied into the 
 267:Generated_Source\PSoC5/CapSense_CSHL.c **** *  baseline array for all sensors enabled in scanning process. Baselines 
 268:Generated_Source\PSoC5/CapSense_CSHL.c **** *  initialize with zero values for sensors disabled from scanning process. 
 269:Generated_Source\PSoC5/CapSense_CSHL.c **** *  The raw data filters are initialized if enabled.
 270:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 271:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 272:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 273:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 274:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 275:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 276:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 277:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 278:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 279:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 280:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 281:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_InitializeEnabledBaselines(void)
 282:Generated_Source\PSoC5/CapSense_CSHL.c ****                              
 283:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 164              		.loc 1 283 0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 0
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 168 0000 10B5     		push	{r4, lr}
 169              		.cfi_def_cfa_offset 8
 170              		.cfi_offset 4, -8
 171              		.cfi_offset 14, -4
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 9


 284:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 i;
 285:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos;
 286:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 enMask;
 287:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 288:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_ScanEnabledWidgets();
 172              		.loc 1 288 0
 173 0002 FFF7FEFF 		bl	CapSense_ScanEnabledWidgets
 174              	.LVL12:
 175              	.L13:
 289:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(CapSense_IsBusy() != 0u)
 176              		.loc 1 289 0 discriminator 1
 177 0006 FFF7FEFF 		bl	CapSense_IsBusy
 178              	.LVL13:
 179 000a 0028     		cmp	r0, #0
 180 000c FBD1     		bne	.L13
 181 000e 0024     		movs	r4, #0
 182 0010 11E0     		b	.L14
 183              	.LVL14:
 184              	.L16:
 290:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 291:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Wait while busy */
 292:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 293:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 294:Generated_Source\PSoC5/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 295:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 296:Generated_Source\PSoC5/CapSense_CSHL.c ****         pos = (i >> 3u);
 185              		.loc 1 296 0
 186 0012 E208     		lsrs	r2, r4, #3
 297:Generated_Source\PSoC5/CapSense_CSHL.c ****         enMask = 0x01u << (i & 0x07u);
 187              		.loc 1 297 0
 188 0014 04F00701 		and	r1, r4, #7
 189 0018 0123     		movs	r3, #1
 190 001a 8B40     		lsls	r3, r3, r1
 191              	.LVL15:
 298:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 299:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Clear raw data if sensor is disabled from scanning process */
 300:Generated_Source\PSoC5/CapSense_CSHL.c ****         if((CapSense_sensorEnableMask[pos] & enMask) == 0u)
 192              		.loc 1 300 0
 193 001c 0749     		ldr	r1, .L18
 194 001e 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 195 0020 1342     		tst	r3, r2
 196 0022 03D1     		bne	.L15
 301:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 302:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_sensorRaw[i] = 0u;
 197              		.loc 1 302 0
 198 0024 0022     		movs	r2, #0
 199 0026 064B     		ldr	r3, .L18+4
 200              	.LVL16:
 201 0028 23F81420 		strh	r2, [r3, r4, lsl #1]	@ movhi
 202              	.L15:
 303:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 304:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 305:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Initialize baselines */
 306:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_BaseInit(i);
 203              		.loc 1 306 0 discriminator 2
 204 002c 2046     		mov	r0, r4
 205 002e FFF7FEFF 		bl	CapSense_BaseInit
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 10


 206              	.LVL17:
 294:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 207              		.loc 1 294 0 discriminator 2
 208 0032 0134     		adds	r4, r4, #1
 209              	.LVL18:
 210 0034 E4B2     		uxtb	r4, r4
 211              	.LVL19:
 212              	.L14:
 294:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 213              		.loc 1 294 0 is_stmt 0 discriminator 1
 214 0036 012C     		cmp	r4, #1
 215 0038 EBD9     		bls	.L16
 307:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 308:Generated_Source\PSoC5/CapSense_CSHL.c **** }  
 216              		.loc 1 308 0 is_stmt 1
 217 003a 10BD     		pop	{r4, pc}
 218              	.LVL20:
 219              	.L19:
 220              		.align	2
 221              	.L18:
 222 003c 00000000 		.word	CapSense_sensorEnableMask
 223 0040 00000000 		.word	CapSense_sensorRaw
 224              		.cfi_endproc
 225              	.LFE3:
 226              		.size	CapSense_InitializeEnabledBaselines, .-CapSense_InitializeEnabledBaselines
 227              		.section	.text.CapSense_CheckIsSensorActive,"ax",%progbits
 228              		.align	2
 229              		.global	CapSense_CheckIsSensorActive
 230              		.thumb
 231              		.thumb_func
 232              		.type	CapSense_CheckIsSensorActive, %function
 233              	CapSense_CheckIsSensorActive:
 234              	.LFB6:
 309:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 310:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 311:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 312:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_UpdateSensorBaseline
 313:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 314:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 315:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 316:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Updates the CapSense_sensorBaseline[sensor] array element using the 
 317:Generated_Source\PSoC5/CapSense_CSHL.c **** *  LP filter with k = 256. The signal calculates the difference of count by 
 318:Generated_Source\PSoC5/CapSense_CSHL.c **** *  subtracting the previous baseline from the current raw count value and stores
 319:Generated_Source\PSoC5/CapSense_CSHL.c **** *  it in CapSense_SensorSignal[sensor]. 
 320:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If auto reset option is enabled the baseline updated regards noise threshold. 
 321:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If auto reset option is disabled the baseline stops updating if signal is 
 322:Generated_Source\PSoC5/CapSense_CSHL.c **** *  greater that zero and baseline loads with raw count value if signal is less 
 323:Generated_Source\PSoC5/CapSense_CSHL.c **** *  that noise threshold.
 324:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Raw data filters are applied to the values if enabled before baseline 
 325:Generated_Source\PSoC5/CapSense_CSHL.c **** *  calculation.
 326:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 327:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 328:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensor:  Sensor number.
 329:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 330:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 331:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 332:Generated_Source\PSoC5/CapSense_CSHL.c **** *
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 11


 333:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 334:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaseline[]    - used to store baseline value.
 335:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaselineLow[] - used to store fraction byte of 
 336:Generated_Source\PSoC5/CapSense_CSHL.c **** *  baseline value.
 337:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorSignal[]      - used to store diffence between 
 338:Generated_Source\PSoC5/CapSense_CSHL.c **** *  current value of raw data and previous value of baseline.
 339:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData1[]    - used to store previous sample of 
 340:Generated_Source\PSoC5/CapSense_CSHL.c **** *  any enabled raw data filter.
 341:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData2[]    - used to store before previous sample
 342:Generated_Source\PSoC5/CapSense_CSHL.c **** *  of enabled raw data filter. Only required for median or average filters.
 343:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 344:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 345:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 346:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 347:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 348:Generated_Source\PSoC5/CapSense_CSHL.c ****  void CapSense_UpdateSensorBaseline(uint8 sensor)
 349:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  
 350:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 351:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint32 calc;
 352:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 tempRaw;
 353:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 filteredRawData;
 354:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 widget = CapSense_widgetNumber[sensor];
 355:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 noiseThreshold = CapSense_noiseThreshold[widget];
 356:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 357:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 358:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Exclude generic widget */
 359:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(widget < CapSense_END_OF_WIDGETS_INDEX)
 360:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 361:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 362:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 363:Generated_Source\PSoC5/CapSense_CSHL.c ****     filteredRawData = CapSense_sensorRaw[sensor];
 364:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 365:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER)
 366:Generated_Source\PSoC5/CapSense_CSHL.c ****         tempRaw = filteredRawData;
 367:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_MedianFilter(filteredRawData, CapSense_rawFilterData1[sensor], 
 368:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                         CapSense_rawFilterData2[sensor]);
 369:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData2[sensor] = CapSense_rawFilterData1[sensor];
 370:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = tempRaw;
 371:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 372:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER)
 373:Generated_Source\PSoC5/CapSense_CSHL.c ****         tempRaw = filteredRawData;
 374:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_AveragingFilter(filteredRawData, CapSense_rawFilterData1[sensor]
 375:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                            CapSense_rawFilterData2[sensor]);
 376:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData2[sensor] = CapSense_rawFilterData1[sensor];
 377:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = tempRaw;
 378:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 379:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER)
 380:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_IIR2Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 381:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 382:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 383:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER)
 384:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_IIR4Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 385:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 386:Generated_Source\PSoC5/CapSense_CSHL.c ****             
 387:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER)
 388:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_JitterFilter(filteredRawData, CapSense_rawFilterData1[sensor]);
 389:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 12


 390:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 391:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)
 392:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_IIR8Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 393:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 394:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 395:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER)
 396:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_IIR16Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 397:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 398:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 399:Generated_Source\PSoC5/CapSense_CSHL.c ****     #else
 400:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* No Raw filters */
 401:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) */
 402:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 403:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING)
 404:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_CalculateThresholds(sensor);
 405:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif /* (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING) */
 406:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 407:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 408:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Baseline calculation */
 409:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Calculate difference RawData[cur] - Baseline[prev] */
 410:Generated_Source\PSoC5/CapSense_CSHL.c ****     if(filteredRawData >= CapSense_sensorBaseline[sensor])
 411:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 412:Generated_Source\PSoC5/CapSense_CSHL.c ****         tempRaw = filteredRawData - CapSense_sensorBaseline[sensor];
 413:Generated_Source\PSoC5/CapSense_CSHL.c ****         widget = 1u;    /* Positive difference - Calculate the Signal */
 414:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 415:Generated_Source\PSoC5/CapSense_CSHL.c ****     else
 416:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 417:Generated_Source\PSoC5/CapSense_CSHL.c ****         tempRaw = CapSense_sensorBaseline[sensor] - filteredRawData;
 418:Generated_Source\PSoC5/CapSense_CSHL.c ****         widget = 0u;    /* Negative difference - Do NOT calculate the Signal */
 419:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 420:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 421:Generated_Source\PSoC5/CapSense_CSHL.c ****     if((widget == 0u) && (tempRaw > (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD))
 422:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 423:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(CapSense_lowBaselineResetCnt[sensor] >= CapSense_LOW_BASELINE_RESET)
 424:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 425:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_BaseInit(sensor);
 426:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_lowBaselineResetCnt[sensor] = 0u;
 427:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 428:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
 429:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 430:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_lowBaselineResetCnt[sensor]++;
 431:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 432:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 433:Generated_Source\PSoC5/CapSense_CSHL.c ****     else
 434:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 435:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE)
 436:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Update Baseline if lower that noiseThreshold */
 437:Generated_Source\PSoC5/CapSense_CSHL.c ****             if ( (tempRaw <= (uint16) noiseThreshold) || 
 438:Generated_Source\PSoC5/CapSense_CSHL.c ****                  ((tempRaw < (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD)
 439:Generated_Source\PSoC5/CapSense_CSHL.c ****                    && (widget == 0u)))
 440:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 441:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE) */
 442:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Make full Baseline 23 bits */
 443:Generated_Source\PSoC5/CapSense_CSHL.c ****                 calc = (uint32) CapSense_sensorBaseline[sensor] << 8u;
 444:Generated_Source\PSoC5/CapSense_CSHL.c ****                 calc |= (uint32) CapSense_sensorBaselineLow[sensor];
 445:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 446:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Add Raw Data to Baseline */
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 13


 447:Generated_Source\PSoC5/CapSense_CSHL.c ****                 calc += filteredRawData;
 448:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 449:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Sub the high Baseline */
 450:Generated_Source\PSoC5/CapSense_CSHL.c ****                 calc -= CapSense_sensorBaseline[sensor];
 451:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 452:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Put Baseline and BaselineLow */
 453:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorBaseline[sensor] = ((uint16) (calc >> 8u));
 454:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorBaselineLow[sensor] = ((uint8) calc);
 455:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 456:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_lowBaselineResetCnt[sensor] = 0u;
 457:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE)
 458:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 459:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE) */
 460:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 461:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 462:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Calculate Signal if possitive difference > noiseThreshold */
 463:Generated_Source\PSoC5/CapSense_CSHL.c ****     if((tempRaw > (uint16) noiseThreshold) && (widget != 0u))
 464:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 465:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_SIGNAL_SIZE == CapSense_SIGNAL_SIZE_UINT8)
 466:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Over flow defence for uint8 */
 467:Generated_Source\PSoC5/CapSense_CSHL.c ****             if (tempRaw > 0xFFu)
 468:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 469:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorSignal[sensor] = 0xFFu;
 470:Generated_Source\PSoC5/CapSense_CSHL.c ****             }    
 471:Generated_Source\PSoC5/CapSense_CSHL.c ****             else 
 472:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 473:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorSignal[sensor] = ((uint8) tempRaw);
 474:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 475:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
 476:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_sensorSignal[sensor] = ((uint16) tempRaw);
 477:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif  /* (CapSense_SIGNAL_SIZE == CapSense_SIGNAL_SIZE_UINT8) */
 478:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 479:Generated_Source\PSoC5/CapSense_CSHL.c ****     else
 480:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 481:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Signal is zero */
 482:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_sensorSignal[sensor] = 0u;
 483:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 484:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 485:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 486:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Exclude generic widget */
 487:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 488:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 489:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 490:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 491:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 492:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 493:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_UpdateEnabledBaselines
 494:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 495:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 496:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 497:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Checks CapSense_sensorEnableMask[] array and calls the 
 498:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_UpdateSensorBaseline function to update the baselines 
 499:Generated_Source\PSoC5/CapSense_CSHL.c **** *  for enabled sensors.
 500:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 501:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 502:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 503:Generated_Source\PSoC5/CapSense_CSHL.c **** *
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 14


 504:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 505:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 506:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 507:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 508:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
 509:Generated_Source\PSoC5/CapSense_CSHL.c **** *  state.
 510:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
 511:Generated_Source\PSoC5/CapSense_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 512:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
 513:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 514:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 515:Generated_Source\PSoC5/CapSense_CSHL.c **** *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 516:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 517:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 518:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 519:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 520:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 521:Generated_Source\PSoC5/CapSense_CSHL.c ****  void CapSense_UpdateEnabledBaselines(void)
 522:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  
 523:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 524:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 i;
 525:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos;
 526:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 enMask;
 527:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 528:Generated_Source\PSoC5/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 529:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 530:Generated_Source\PSoC5/CapSense_CSHL.c ****         pos = (i >> 3u);
 531:Generated_Source\PSoC5/CapSense_CSHL.c ****         enMask = (uint8)(0x01u << (i & 0x07u));
 532:Generated_Source\PSoC5/CapSense_CSHL.c ****         if((CapSense_sensorEnableMask[pos] & enMask) != 0u)
 533:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 534:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_UpdateSensorBaseline(i);
 535:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 536:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 537:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 538:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 539:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 540:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 541:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_CheckIsSensorActive
 542:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 543:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 544:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 545:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Compares the CapSense_SensorSignal[sensor] array element to finger
 546:Generated_Source\PSoC5/CapSense_CSHL.c **** *  threshold of widget it belongs to. The hysteresis and debounce are taken into 
 547:Generated_Source\PSoC5/CapSense_CSHL.c **** *  account. The hysteresis is added or subtracted from the finger threshold 
 548:Generated_Source\PSoC5/CapSense_CSHL.c **** *  based on whether the sensor is currently active. 
 549:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If the sensor is active, the threshold is lowered by the hysteresis amount.
 550:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If the sensor is inactive, the threshold is raised by the hysteresis amount.
 551:Generated_Source\PSoC5/CapSense_CSHL.c **** *  The debounce counter added to the sensor active transition.
 552:Generated_Source\PSoC5/CapSense_CSHL.c **** *  This function updates CapSense_SensorOnMask[] array element.
 553:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 554:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 555:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensor:  Sensor number.
 556:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 557:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 558:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Returns sensor state 1 if active, 0 if not active.
 559:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 560:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 15


 561:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorSignal[]      - used to store diffence between 
 562:Generated_Source\PSoC5/CapSense_CSHL.c **** *  current value of raw data and previous value of baseline.
 563:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_debounceCounter[]   - used to store current debounce 
 564:Generated_Source\PSoC5/CapSense_CSHL.c **** *  counter of sensor. Widget which has this parameter are buttons, matrix 
 565:Generated_Source\PSoC5/CapSense_CSHL.c **** *  buttons, proximity, guard. All other widgets haven't debounce parameter
 566:Generated_Source\PSoC5/CapSense_CSHL.c **** *  and use the last element of this array with value 0 (it means no debounce).
 567:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorOnMask[] - used to store sensors on/off state.
 568:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorOnMask[0] contains the masked bits for sensors 
 569:Generated_Source\PSoC5/CapSense_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 570:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
 571:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 572:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 - sensor is inactive.
 573:Generated_Source\PSoC5/CapSense_CSHL.c **** *  1 - sensor is active.
 574:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 575:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 576:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 577:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 578:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 579:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_CheckIsSensorActive(uint8 sensor)
 580:Generated_Source\PSoC5/CapSense_CSHL.c ****                                   
 581:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 235              		.loc 1 581 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 0
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239              	.LVL21:
 240 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 241              		.cfi_def_cfa_offset 20
 242              		.cfi_offset 4, -20
 243              		.cfi_offset 5, -16
 244              		.cfi_offset 6, -12
 245              		.cfi_offset 7, -8
 246              		.cfi_offset 14, -4
 582:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 debounceIndex;
 583:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Get On/Off mask */
 584:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos = (sensor >> 3u);
 247              		.loc 1 584 0
 248 0002 C408     		lsrs	r4, r0, #3
 249              	.LVL22:
 585:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 onMask = 0x01u << (sensor & 0x07u);
 250              		.loc 1 585 0
 251 0004 00F00702 		and	r2, r0, #7
 252 0008 0123     		movs	r3, #1
 253 000a 9340     		lsls	r3, r3, r2
 254 000c DBB2     		uxtb	r3, r3
 255              	.LVL23:
 586:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Prepare to find debounce counter index */
 587:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 widget = CapSense_widgetNumber[sensor];
 256              		.loc 1 587 0
 257 000e 194A     		ldr	r2, .L27
 258 0010 125C     		ldrb	r2, [r2, r0]	@ zero_extendqisi2
 588:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 fingerThreshold = CapSense_fingerThreshold[widget];
 259              		.loc 1 588 0
 260 0012 194D     		ldr	r5, .L27+4
 261 0014 AE18     		adds	r6, r5, r2
 262 0016 3779     		ldrb	r7, [r6, #4]	@ zero_extendqisi2
 263              	.LVL24:
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 16


 589:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 hysteresis = CapSense_hysteresis[widget];
 264              		.loc 1 589 0
 265 0018 317A     		ldrb	r1, [r6, #8]	@ zero_extendqisi2
 266              	.LVL25:
 590:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 debounce = CapSense_debounce[widget];
 267              		.loc 1 590 0
 268 001a AE5C     		ldrb	r6, [r5, r2]	@ zero_extendqisi2
 269              	.LVL26:
 591:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 592:Generated_Source\PSoC5/CapSense_CSHL.c ****     debounceIndex = widget;
 593:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 594:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 595:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Was on */
 596:Generated_Source\PSoC5/CapSense_CSHL.c ****     if (0u != (CapSense_sensorOnMask[pos] & onMask))
 270              		.loc 1 596 0
 271 001c 174D     		ldr	r5, .L27+8
 272 001e 2D5D     		ldrb	r5, [r5, r4]	@ zero_extendqisi2
 273 0020 2B42     		tst	r3, r5
 274 0022 0DD0     		beq	.L21
 597:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 598:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Hysteresis minus */
 599:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (CapSense_sensorSignal[sensor] < (fingerThreshold - hysteresis))
 275              		.loc 1 599 0
 276 0024 DFF85CE0 		ldr	lr, .L27+16
 277 0028 1EF80000 		ldrb	r0, [lr, r0]	@ zero_extendqisi2
 278              	.LVL27:
 279 002c 791A     		subs	r1, r7, r1
 280              	.LVL28:
 281 002e 8842     		cmp	r0, r1
 282 0030 1ADA     		bge	.L22
 600:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 601:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_sensorOnMask[pos] &= (uint8)~onMask;
 283              		.loc 1 601 0
 284 0032 25EA0305 		bic	r5, r5, r3
 285 0036 1149     		ldr	r1, .L27+8
 286 0038 0D55     		strb	r5, [r1, r4]
 602:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_debounceCounter[debounceIndex] = debounce; 
 287              		.loc 1 602 0
 288 003a 1149     		ldr	r1, .L27+12
 289 003c 8E54     		strb	r6, [r1, r2]
 290 003e 13E0     		b	.L22
 291              	.LVL29:
 292              	.L21:
 603:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 604:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 605:Generated_Source\PSoC5/CapSense_CSHL.c ****     else    /* Was off */
 606:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 607:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Hysteresis plus */
 608:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (CapSense_sensorSignal[sensor] > (fingerThreshold + hysteresis))
 293              		.loc 1 608 0
 294 0040 DFF840E0 		ldr	lr, .L27+16
 295 0044 1EF80000 		ldrb	r0, [lr, r0]	@ zero_extendqisi2
 296              	.LVL30:
 297 0048 3944     		add	r1, r1, r7
 298              	.LVL31:
 299 004a 8842     		cmp	r0, r1
 300 004c 0ADD     		ble	.L23
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 17


 609:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 610:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Sensor active, decrement debounce counter */
 611:Generated_Source\PSoC5/CapSense_CSHL.c ****             if (CapSense_debounceCounter[debounceIndex] <= 1u)
 301              		.loc 1 611 0
 302 004e 0C49     		ldr	r1, .L27+12
 303 0050 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 304 0052 0129     		cmp	r1, #1
 305 0054 02D8     		bhi	.L24
 612:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 613:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorOnMask[pos] |= onMask; 
 306              		.loc 1 613 0
 307 0056 1D43     		orrs	r5, r5, r3
 308 0058 0848     		ldr	r0, .L27+8
 309 005a 0555     		strb	r5, [r0, r4]
 310              	.L24:
 614:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 615:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_debounceCounter[debounceIndex]--;
 311              		.loc 1 615 0
 312 005c 0139     		subs	r1, r1, #1
 313 005e 0848     		ldr	r0, .L27+12
 314 0060 8154     		strb	r1, [r0, r2]
 315 0062 01E0     		b	.L22
 316              	.L23:
 616:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 617:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
 618:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 619:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Sensor inactive - reset Debounce counter */
 620:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_debounceCounter[debounceIndex] = debounce;
 317              		.loc 1 620 0
 318 0064 0649     		ldr	r1, .L27+12
 319 0066 8E54     		strb	r6, [r1, r2]
 320              	.L22:
 621:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 622:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 623:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 624:Generated_Source\PSoC5/CapSense_CSHL.c ****     return (((CapSense_sensorOnMask[pos] & onMask) != 0u) ? 1u : 0u);
 321              		.loc 1 624 0
 322 0068 044A     		ldr	r2, .L27+8
 323              	.LVL32:
 324 006a 105D     		ldrb	r0, [r2, r4]	@ zero_extendqisi2
 325 006c 1840     		ands	r0, r3, r0
 326 006e 00D0     		beq	.L25
 327 0070 0120     		movs	r0, #1
 328              	.L25:
 625:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 329              		.loc 1 625 0 discriminator 4
 330 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 331              	.LVL33:
 332              	.L28:
 333              		.align	2
 334              	.L27:
 335 0074 00000000 		.word	CapSense_widgetNumber
 336 0078 00000000 		.word	.LANCHOR0
 337 007c 00000000 		.word	CapSense_sensorOnMask
 338 0080 00000000 		.word	.LANCHOR1
 339 0084 00000000 		.word	CapSense_sensorSignal
 340              		.cfi_endproc
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 18


 341              	.LFE6:
 342              		.size	CapSense_CheckIsSensorActive, .-CapSense_CheckIsSensorActive
 343              		.section	.text.CapSense_CheckIsWidgetActive,"ax",%progbits
 344              		.align	2
 345              		.global	CapSense_CheckIsWidgetActive
 346              		.thumb
 347              		.thumb_func
 348              		.type	CapSense_CheckIsWidgetActive, %function
 349              	CapSense_CheckIsWidgetActive:
 350              	.LFB7:
 626:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 627:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 628:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 629:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_CheckIsWidgetActive
 630:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 631:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 632:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 633:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Use function CapSense_CheckIsSensorActive() to update 
 634:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorOnMask[] for all sensors within the widget.
 635:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If one of sensors within widget is active the function return that widget is 
 636:Generated_Source\PSoC5/CapSense_CSHL.c **** *  active.
 637:Generated_Source\PSoC5/CapSense_CSHL.c **** *  The touch pad and matrix buttons widgets need to have active sensor within 
 638:Generated_Source\PSoC5/CapSense_CSHL.c **** *  col and row to return widget active status.
 639:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 640:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 641:Generated_Source\PSoC5/CapSense_CSHL.c **** *  widget:  widget number.
 642:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 643:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 644:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Returns widget sensor state 1 if one or more sensors within widget is/are 
 645:Generated_Source\PSoC5/CapSense_CSHL.c **** *  active, 0 if all sensors within widget are inactive.
 646:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 647:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 648:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 649:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 650:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 651:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_CheckIsWidgetActive(uint8 widget)
 652:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  
 653:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 351              		.loc 1 653 0
 352              		.cfi_startproc
 353              		@ args = 0, pretend = 0, frame = 0
 354              		@ frame_needed = 0, uses_anonymous_args = 0
 355              	.LVL34:
 356 0000 70B5     		push	{r4, r5, r6, lr}
 357              		.cfi_def_cfa_offset 16
 358              		.cfi_offset 4, -16
 359              		.cfi_offset 5, -12
 360              		.cfi_offset 6, -8
 361              		.cfi_offset 14, -4
 654:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 rawIndex = CapSense_rawDataIndex[widget];
 362              		.loc 1 654 0
 363 0002 094B     		ldr	r3, .L34
 364 0004 1C5C     		ldrb	r4, [r3, r0]	@ zero_extendqisi2
 365              	.LVL35:
 655:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 366              		.loc 1 655 0
 367 0006 1844     		add	r0, r0, r3
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 19


 368              	.LVL36:
 369 0008 0579     		ldrb	r5, [r0, #4]	@ zero_extendqisi2
 370 000a 2544     		add	r5, r5, r4
 371 000c EDB2     		uxtb	r5, r5
 372              	.LVL37:
 656:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 state = 0u;
 373              		.loc 1 656 0
 374 000e 0026     		movs	r6, #0
 375              	.LVL38:
 376              	.L31:
 657:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 658:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Check all sensors of the widget */
 659:Generated_Source\PSoC5/CapSense_CSHL.c ****     do
 660:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 661:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(CapSense_CheckIsSensorActive(rawIndex) != 0u)
 377              		.loc 1 661 0
 378 0010 2046     		mov	r0, r4
 379 0012 FFF7FEFF 		bl	CapSense_CheckIsSensorActive
 380              	.LVL39:
 381 0016 00B1     		cbz	r0, .L30
 662:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 663:Generated_Source\PSoC5/CapSense_CSHL.c ****             state = CapSense_SENSOR_1_IS_ACTIVE;
 382              		.loc 1 663 0
 383 0018 0126     		movs	r6, #1
 384              	.LVL40:
 385              	.L30:
 664:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 665:Generated_Source\PSoC5/CapSense_CSHL.c ****         rawIndex++;
 386              		.loc 1 665 0
 387 001a 0134     		adds	r4, r4, #1
 388              	.LVL41:
 389 001c E4B2     		uxtb	r4, r4
 390              	.LVL42:
 666:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 667:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(rawIndex < numberOfSensors);
 391              		.loc 1 667 0
 392 001e A542     		cmp	r5, r4
 393 0020 F6D8     		bhi	.L31
 668:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 669:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 670:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 671:Generated_Source\PSoC5/CapSense_CSHL.c ****     return (state);
 672:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 394              		.loc 1 672 0
 395 0022 3046     		mov	r0, r6
 396 0024 70BD     		pop	{r4, r5, r6, pc}
 397              	.LVL43:
 398              	.L35:
 399 0026 00BF     		.align	2
 400              	.L34:
 401 0028 00000000 		.word	.LANCHOR2
 402              		.cfi_endproc
 403              	.LFE7:
 404              		.size	CapSense_CheckIsWidgetActive, .-CapSense_CheckIsWidgetActive
 405              		.section	.text.CapSense_CheckIsAnyWidgetActive,"ax",%progbits
 406              		.align	2
 407              		.global	CapSense_CheckIsAnyWidgetActive
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 20


 408              		.thumb
 409              		.thumb_func
 410              		.type	CapSense_CheckIsAnyWidgetActive, %function
 411              	CapSense_CheckIsAnyWidgetActive:
 412              	.LFB8:
 673:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 674:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 675:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 676:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_CheckIsAnyWidgetActive
 677:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 678:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 679:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 680:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Compares all sensors of the CapSense_signal[] array to their finger 
 681:Generated_Source\PSoC5/CapSense_CSHL.c **** *  threshold. Calls CapSense_CheckIsWidgetActive() for each widget so 
 682:Generated_Source\PSoC5/CapSense_CSHL.c **** *  the CapSense_SensorOnMask[] array is up to date after calling this 
 683:Generated_Source\PSoC5/CapSense_CSHL.c **** *  function.
 684:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 685:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 686:Generated_Source\PSoC5/CapSense_CSHL.c **** *  widget:  widget number.
 687:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 688:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 689:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Returns 1 if any widget is active, 0 none of widgets are active.
 690:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 691:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 692:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 693:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 694:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 695:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_CheckIsAnyWidgetActive(void)
 696:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  
 697:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 413              		.loc 1 697 0
 414              		.cfi_startproc
 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 0, uses_anonymous_args = 0
 417 0000 38B5     		push	{r3, r4, r5, lr}
 418              		.cfi_def_cfa_offset 16
 419              		.cfi_offset 3, -16
 420              		.cfi_offset 4, -12
 421              		.cfi_offset 5, -8
 422              		.cfi_offset 14, -4
 423              	.LVL44:
 698:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 i;
 699:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 state = 0u;
 424              		.loc 1 699 0
 425 0002 0025     		movs	r5, #0
 700:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 701:Generated_Source\PSoC5/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_WIDGET_COUNT; i++)
 426              		.loc 1 701 0
 427 0004 2C46     		mov	r4, r5
 428 0006 06E0     		b	.L37
 429              	.LVL45:
 430              	.L39:
 702:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 703:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (CapSense_CheckIsWidgetActive(i) != 0u)
 431              		.loc 1 703 0
 432 0008 2046     		mov	r0, r4
 433 000a FFF7FEFF 		bl	CapSense_CheckIsWidgetActive
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 21


 434              	.LVL46:
 435 000e 00B1     		cbz	r0, .L38
 704:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 705:Generated_Source\PSoC5/CapSense_CSHL.c ****             state = CapSense_WIDGET_IS_ACTIVE;
 436              		.loc 1 705 0
 437 0010 0125     		movs	r5, #1
 438              	.LVL47:
 439              	.L38:
 701:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 440              		.loc 1 701 0 discriminator 2
 441 0012 0134     		adds	r4, r4, #1
 442              	.LVL48:
 443 0014 E4B2     		uxtb	r4, r4
 444              	.LVL49:
 445              	.L37:
 701:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 446              		.loc 1 701 0 is_stmt 0 discriminator 1
 447 0016 012C     		cmp	r4, #1
 448 0018 F6D9     		bls	.L39
 706:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 707:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 708:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 709:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 710:Generated_Source\PSoC5/CapSense_CSHL.c ****     return (state);
 711:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 449              		.loc 1 711 0 is_stmt 1
 450 001a 2846     		mov	r0, r5
 451 001c 38BD     		pop	{r3, r4, r5, pc}
 452              		.cfi_endproc
 453              	.LFE8:
 454              		.size	CapSense_CheckIsAnyWidgetActive, .-CapSense_CheckIsAnyWidgetActive
 455 001e 00BF     		.section	.text.CapSense_EnableWidget,"ax",%progbits
 456              		.align	2
 457              		.global	CapSense_EnableWidget
 458              		.thumb
 459              		.thumb_func
 460              		.type	CapSense_EnableWidget, %function
 461              	CapSense_EnableWidget:
 462              	.LFB9:
 712:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 713:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 714:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 715:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_EnableWidget
 716:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 717:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 718:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 719:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Enable all widget elements (sensors) to scanning process.
 720:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 721:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 722:Generated_Source\PSoC5/CapSense_CSHL.c **** *  widget:  widget number.
 723:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 724:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 725:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 726:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 727:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 728:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
 729:Generated_Source\PSoC5/CapSense_CSHL.c **** *  state.
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 22


 730:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
 731:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 732:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
 733:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 734:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 735:Generated_Source\PSoC5/CapSense_CSHL.c **** *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 736:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 737:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 738:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 739:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 740:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 741:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_EnableWidget(uint8 widget)
 742:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    
 743:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 463              		.loc 1 743 0
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 0
 466              		@ frame_needed = 0, uses_anonymous_args = 0
 467              		@ link register save eliminated.
 468              	.LVL50:
 469 0000 30B4     		push	{r4, r5}
 470              		.cfi_def_cfa_offset 8
 471              		.cfi_offset 4, -8
 472              		.cfi_offset 5, -4
 744:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos;
 745:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 enMask;
 746:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 rawIndex = CapSense_rawDataIndex[widget];
 473              		.loc 1 746 0
 474 0002 0B4A     		ldr	r2, .L45
 475 0004 135C     		ldrb	r3, [r2, r0]	@ zero_extendqisi2
 476              	.LVL51:
 747:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 477              		.loc 1 747 0
 478 0006 1044     		add	r0, r0, r2
 479              	.LVL52:
 480 0008 0579     		ldrb	r5, [r0, #4]	@ zero_extendqisi2
 481 000a 1D44     		add	r5, r5, r3
 482 000c EDB2     		uxtb	r5, r5
 483              	.LVL53:
 484              	.L43:
 748:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 749:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Enable all sensors of the widget */
 750:Generated_Source\PSoC5/CapSense_CSHL.c ****     do
 751:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 752:Generated_Source\PSoC5/CapSense_CSHL.c ****         pos = (rawIndex >> 3u);
 485              		.loc 1 752 0 discriminator 1
 486 000e D808     		lsrs	r0, r3, #3
 487              	.LVL54:
 753:Generated_Source\PSoC5/CapSense_CSHL.c ****         enMask = 0x01u << (rawIndex & 0x07u);
 488              		.loc 1 753 0 discriminator 1
 489 0010 03F00701 		and	r1, r3, #7
 490 0014 0122     		movs	r2, #1
 491 0016 8A40     		lsls	r2, r2, r1
 492 0018 D2B2     		uxtb	r2, r2
 493              	.LVL55:
 754:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 755:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_sensorEnableMask[pos] |= enMask;
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 23


 494              		.loc 1 755 0 discriminator 1
 495 001a 064C     		ldr	r4, .L45+4
 496 001c 215C     		ldrb	r1, [r4, r0]	@ zero_extendqisi2
 497 001e 0A43     		orrs	r2, r2, r1
 498              	.LVL56:
 499 0020 2254     		strb	r2, [r4, r0]
 756:Generated_Source\PSoC5/CapSense_CSHL.c ****         rawIndex++;
 500              		.loc 1 756 0 discriminator 1
 501 0022 0133     		adds	r3, r3, #1
 502              	.LVL57:
 503 0024 DBB2     		uxtb	r3, r3
 504              	.LVL58:
 757:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 758:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(rawIndex < numberOfSensors);
 505              		.loc 1 758 0 discriminator 1
 506 0026 9D42     		cmp	r5, r3
 507 0028 F1D8     		bhi	.L43
 759:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 760:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 761:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 508              		.loc 1 761 0
 509 002a 30BC     		pop	{r4, r5}
 510              		.cfi_restore 5
 511              		.cfi_restore 4
 512              		.cfi_def_cfa_offset 0
 513              	.LVL59:
 514 002c 7047     		bx	lr
 515              	.L46:
 516 002e 00BF     		.align	2
 517              	.L45:
 518 0030 00000000 		.word	.LANCHOR2
 519 0034 00000000 		.word	CapSense_sensorEnableMask
 520              		.cfi_endproc
 521              	.LFE9:
 522              		.size	CapSense_EnableWidget, .-CapSense_EnableWidget
 523              		.section	.text.CapSense_DisableWidget,"ax",%progbits
 524              		.align	2
 525              		.global	CapSense_DisableWidget
 526              		.thumb
 527              		.thumb_func
 528              		.type	CapSense_DisableWidget, %function
 529              	CapSense_DisableWidget:
 530              	.LFB10:
 762:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 763:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 764:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 765:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_DisableWidget
 766:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 767:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 768:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 769:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Disable all widget elements (sensors) from scanning process.
 770:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 771:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 772:Generated_Source\PSoC5/CapSense_CSHL.c **** *  widget:  widget number.
 773:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 774:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 775:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 24


 776:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 777:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 778:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
 779:Generated_Source\PSoC5/CapSense_CSHL.c **** *  state.
 780:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
 781:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 782:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
 783:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 784:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 785:Generated_Source\PSoC5/CapSense_CSHL.c **** *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 786:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 787:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 788:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 789:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 790:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 791:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_DisableWidget(uint8 widget)
 792:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     
 793:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 531              		.loc 1 793 0
 532              		.cfi_startproc
 533              		@ args = 0, pretend = 0, frame = 0
 534              		@ frame_needed = 0, uses_anonymous_args = 0
 535              		@ link register save eliminated.
 536              	.LVL60:
 537 0000 30B4     		push	{r4, r5}
 538              		.cfi_def_cfa_offset 8
 539              		.cfi_offset 4, -8
 540              		.cfi_offset 5, -4
 794:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos;
 795:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 enMask;
 796:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 rawIndex = CapSense_rawDataIndex[widget];
 541              		.loc 1 796 0
 542 0002 0B4A     		ldr	r2, .L50
 543 0004 135C     		ldrb	r3, [r2, r0]	@ zero_extendqisi2
 544              	.LVL61:
 797:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 545              		.loc 1 797 0
 546 0006 1044     		add	r0, r0, r2
 547              	.LVL62:
 548 0008 0579     		ldrb	r5, [r0, #4]	@ zero_extendqisi2
 549 000a 1D44     		add	r5, r5, r3
 550 000c EDB2     		uxtb	r5, r5
 551              	.LVL63:
 552              	.L48:
 798:Generated_Source\PSoC5/CapSense_CSHL.c ****    
 799:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Disable all sensors of the widget */
 800:Generated_Source\PSoC5/CapSense_CSHL.c ****     do
 801:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 802:Generated_Source\PSoC5/CapSense_CSHL.c ****         pos = (rawIndex >> 3u);
 553              		.loc 1 802 0 discriminator 1
 554 000e D808     		lsrs	r0, r3, #3
 555              	.LVL64:
 803:Generated_Source\PSoC5/CapSense_CSHL.c ****         enMask = 0x01u << (rawIndex & 0x07u);
 556              		.loc 1 803 0 discriminator 1
 557 0010 03F00701 		and	r1, r3, #7
 558 0014 0122     		movs	r2, #1
 559 0016 8A40     		lsls	r2, r2, r1
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 25


 560 0018 D2B2     		uxtb	r2, r2
 561              	.LVL65:
 804:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 805:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_sensorEnableMask[pos] &= (uint8)~enMask;
 562              		.loc 1 805 0 discriminator 1
 563 001a 064C     		ldr	r4, .L50+4
 564 001c 215C     		ldrb	r1, [r4, r0]	@ zero_extendqisi2
 565 001e 21EA0202 		bic	r2, r1, r2
 566              	.LVL66:
 567 0022 2254     		strb	r2, [r4, r0]
 806:Generated_Source\PSoC5/CapSense_CSHL.c ****         rawIndex++;
 568              		.loc 1 806 0 discriminator 1
 569 0024 0133     		adds	r3, r3, #1
 570              	.LVL67:
 571 0026 DBB2     		uxtb	r3, r3
 572              	.LVL68:
 807:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 808:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(rawIndex < numberOfSensors);
 573              		.loc 1 808 0 discriminator 1
 574 0028 9D42     		cmp	r5, r3
 575 002a F0D8     		bhi	.L48
 809:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 810:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 811:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 576              		.loc 1 811 0
 577 002c 30BC     		pop	{r4, r5}
 578              		.cfi_restore 5
 579              		.cfi_restore 4
 580              		.cfi_def_cfa_offset 0
 581              	.LVL69:
 582 002e 7047     		bx	lr
 583              	.L51:
 584              		.align	2
 585              	.L50:
 586 0030 00000000 		.word	.LANCHOR2
 587 0034 00000000 		.word	CapSense_sensorEnableMask
 588              		.cfi_endproc
 589              	.LFE10:
 590              		.size	CapSense_DisableWidget, .-CapSense_DisableWidget
 591              		.section	.text.CapSense_IIR4Filter,"ax",%progbits
 592              		.align	2
 593              		.global	CapSense_IIR4Filter
 594              		.thumb
 595              		.thumb_func
 596              		.type	CapSense_IIR4Filter, %function
 597              	CapSense_IIR4Filter:
 598              	.LFB11:
 812:Generated_Source\PSoC5/CapSense_CSHL.c **** #if(CapSense_TOTAL_CENTROIDS_COUNT)
 813:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
 814:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_FindMaximum
 815:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
 816:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
 817:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
 818:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Finds index of maximum element within defined centroid. Checks 
 819:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  CapSense_SensorSignal[] within defined cenrtoid and 
 820:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  returns index of maximum element. The values below finger threshold are 
 821:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  ignored.
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 26


 822:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The centrod defines by offset of first element and number of elements - count.
 823:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The diplexed centroid requires at least consecutive two elements above
 824:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  FingerThreshold to find index of maximum element.
 825:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
 826:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
 827:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  offset:  Start index of cetroid in CapSense_sensorSignal[] array.
 828:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  count:   number of elements within centroid.
 829:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  fingerThreshold:  Finger threshould.
 830:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  diplex:   pointer to diplex table.
 831:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
 832:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
 833:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns index of maximum element within defined centroid.
 834:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If index of maximum element doesn't find the 0xFF returns.
 835:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
 836:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
 837:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_IS_DIPLEX_SLIDER)
 838:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 CapSense_FindMaximum(uint8 offset, uint8 count, uint8 fingerThreshold, const uint8 CY
 839:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                       
 840:Generated_Source\PSoC5/CapSense_CSHL.c ****     #else 
 841:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 CapSense_FindMaximum(uint8 offset, uint8 count, uint8 fingerThreshold)
 842:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                       
 843:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif /* (CapSense_IS_DIPLEX_SLIDER) */
 844:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 845:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 i;
 846:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)        
 847:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 curPos = 0u;
 848:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* No centroid at the Start */
 849:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 curCntrdSize = 0u;
 850:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 curCtrdStartPos = 0xFFu;
 851:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* The biggset centroid is zero */
 852:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 biggestCtrdSize = 0u;
 853:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 biggestCtrdStartPos = 0u;
 854:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
 855:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maximum = 0xFFu;
 856:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 temp = 0u;
 857:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 *startOfSlider = &CapSense_sensorSignal[offset]; 
 858:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 859:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)        
 860:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(diplex != 0u)
 861:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 862:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Initialize */
 863:Generated_Source\PSoC5/CapSense_CSHL.c ****                 i = 0u;
 864:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
 865:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Make slider x2 as Diplexed */
 866:Generated_Source\PSoC5/CapSense_CSHL.c ****                 count <<= 1u;
 867:Generated_Source\PSoC5/CapSense_CSHL.c ****                 while(1u)
 868:Generated_Source\PSoC5/CapSense_CSHL.c ****                 { 
 869:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (startOfSlider[curPos] > 0u)    /* Looking for centroids */
 870:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
 871:Generated_Source\PSoC5/CapSense_CSHL.c ****                         if (curCtrdStartPos == 0xFFu)
 872:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
 873:Generated_Source\PSoC5/CapSense_CSHL.c ****                             /* Start of centroid */
 874:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCtrdStartPos = i;
 875:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCntrdSize++;
 876:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
 877:Generated_Source\PSoC5/CapSense_CSHL.c ****                         else
 878:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 27


 879:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCntrdSize++;
 880:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
 881:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
 882:Generated_Source\PSoC5/CapSense_CSHL.c ****                     else   /* Select the bigest and indicate zero start */
 883:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {          
 884:Generated_Source\PSoC5/CapSense_CSHL.c ****                         if(curCntrdSize > 0u)
 885:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
 886:Generated_Source\PSoC5/CapSense_CSHL.c ****                             /* We are in the end of current */
 887:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if(curCntrdSize > biggestCtrdSize)
 888:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
 889:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 biggestCtrdSize = curCntrdSize;
 890:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 biggestCtrdStartPos = curCtrdStartPos;
 891:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
 892:Generated_Source\PSoC5/CapSense_CSHL.c ****                             
 893:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCntrdSize = 0u;
 894:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCtrdStartPos = 0xFFu;
 895:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
 896:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
 897:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
 898:Generated_Source\PSoC5/CapSense_CSHL.c ****                     i++; 
 899:Generated_Source\PSoC5/CapSense_CSHL.c ****                     curPos = diplex[i];
 900:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if(i == count)
 901:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
 902:Generated_Source\PSoC5/CapSense_CSHL.c ****                         break;
 903:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }            
 904:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
 905:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
 906:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Find the biggest centroid if two are the same size, last one wins
 907:Generated_Source\PSoC5/CapSense_CSHL.c ****                        We are in the end of current */
 908:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (curCntrdSize >= biggestCtrdSize) 
 909:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
 910:Generated_Source\PSoC5/CapSense_CSHL.c ****                     biggestCtrdSize = curCntrdSize;
 911:Generated_Source\PSoC5/CapSense_CSHL.c ****                     biggestCtrdStartPos = curCtrdStartPos;
 912:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
 913:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 914:Generated_Source\PSoC5/CapSense_CSHL.c ****             else
 915:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 916:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Without diplexing */ 
 917:Generated_Source\PSoC5/CapSense_CSHL.c ****                 biggestCtrdSize = count;
 918:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 919:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
 920:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 921:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Check centroid size */
 922:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (CapSense_IS_NON_DIPLEX_SLIDER)
 923:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if((biggestCtrdSize >= 2u) || ((biggestCtrdSize == 1u) && (diplex == 0u)))
 924:Generated_Source\PSoC5/CapSense_CSHL.c ****             #else                    
 925:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if(biggestCtrdSize >= 2u)
 926:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (CapSense_IS_NON_DIPLEX_SLIDER) */
 927:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
 928:Generated_Source\PSoC5/CapSense_CSHL.c ****                     for (i = biggestCtrdStartPos; i < (biggestCtrdStartPos + biggestCtrdSize); i++)
 929:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
 930:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER)
 931:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (diplex == 0u)
 932:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
 933:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 curPos = i;
 934:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
 935:Generated_Source\PSoC5/CapSense_CSHL.c ****                             else
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 28


 936:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
 937:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 curPos = diplex[i];
 938:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }                    
 939:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #elif (CapSense_IS_DIPLEX_SLIDER)                    
 940:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curPos = diplex[i];                    
 941:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER) */
 942:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Looking for the grater element within centroid */
 943:Generated_Source\PSoC5/CapSense_CSHL.c ****                         if(startOfSlider[curPos] > fingerThreshold)
 944:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
 945:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if(startOfSlider[curPos] > temp)
 946:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
 947:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 maximum = i;
 948:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 temp = startOfSlider[curPos];
 949:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
 950:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
 951:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
 952:Generated_Source\PSoC5/CapSense_CSHL.c ****                 } 
 953:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
 954:Generated_Source\PSoC5/CapSense_CSHL.c ****             for (i = 0u; i < count; i++)
 955:Generated_Source\PSoC5/CapSense_CSHL.c ****             {                      
 956:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Looking for the grater element within centroid */
 957:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if(startOfSlider[i] > fingerThreshold)
 958:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
 959:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if(startOfSlider[i] > temp)
 960:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
 961:Generated_Source\PSoC5/CapSense_CSHL.c ****                         maximum = i;
 962:Generated_Source\PSoC5/CapSense_CSHL.c ****                         temp = startOfSlider[i];
 963:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
 964:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
 965:Generated_Source\PSoC5/CapSense_CSHL.c ****             }    
 966:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
 967:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (maximum);
 968:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 969:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 970:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 971:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
 972:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_CalcCentroid
 973:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
 974:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
 975:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
 976:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns position value calculated accoring index of maximum element and API
 977:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  resolution.
 978:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
 979:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
 980:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  type:  widget type.
 981:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  diplex:  pointer to diplex table.
 982:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  maximum:  Index of maximum element within centroid.
 983:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  offset:   Start index of cetroid in CapSense_SensorSignal[] array.
 984:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  count:    Number of elements within centroid.
 985:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  resolution:  multiplicator calculated according to centroid type and
 986:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  API resolution.
 987:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  noiseThreshold:  Noise threshould.
 988:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
 989:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
 990:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns position value of the slider.
 991:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
 992:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 29


 993:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Reentrant:
 994:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  No.
 995:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
 996:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
 997:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 CapSense_CalcCentroid(uint8 maximum, uint8 offset, 
 998:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         uint8 count, uint16 resolution, uint8 noiseThreshold)
 999:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                    
1000:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1001:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_TOUCH_PADS_COUNT > 0u))
1002:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posPrev = 0u;
1003:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posNext = 0u;
1004:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT>0u) || (CapSense_TOTAL_TOUCH_PADS_COUNT>0u)
1005:Generated_Source\PSoC5/CapSense_CSHL.c ****                
1006:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)                
1007:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 pos;
1008:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1009:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1010:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Helps while centroid calulation */
1011:Generated_Source\PSoC5/CapSense_CSHL.c ****         static uint8 CapSense_centroid[3u];
1012:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1013:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 position;
1014:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint32 numerator;
1015:Generated_Source\PSoC5/CapSense_CSHL.c ****         int32 denominator;
1016:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 *startOfSlider = &CapSense_sensorSignal[offset];
1017:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
1018:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_ADD_SLIDER_TYPE)
1019:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(type == CapSense_TYPE_RADIAL_SLIDER)
1020:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1021:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_ADD_SLIDER_TYPE) */
1022:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1023:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)                
1024:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Copy Signal for found centriod */
1025:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_centroid[CapSense_POS] = startOfSlider[maximum];
1026:Generated_Source\PSoC5/CapSense_CSHL.c ****                  
1027:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Check borders for ROTARY Slider */
1028:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (maximum == 0u)                   /* Start of centroid */
1029:Generated_Source\PSoC5/CapSense_CSHL.c ****                 { 
1030:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[count - 1u];
1031:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[1u];
1032:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1033:Generated_Source\PSoC5/CapSense_CSHL.c ****                 else if (maximum == (count - 1u))    /* End of centroid */
1034:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1035:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[maximum - 1u];
1036:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[0u];
1037:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1038:Generated_Source\PSoC5/CapSense_CSHL.c ****                 else                                /* Not first Not last */
1039:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1040:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[maximum - 1u];
1041:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[maximum + 1u];
1042:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1043:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1044:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1045:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_ADD_SLIDER_TYPE)
1046:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1047:Generated_Source\PSoC5/CapSense_CSHL.c ****             else
1048:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1049:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_ADD_SLIDER_TYPE) */
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 30


1050:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1051:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_TOUCH_PADS_COUNT > 0
1052:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #if (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER)                   
1053:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Calculate next and previous near to maximum */
1054:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if(diplex == 0u)
1055:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1056:Generated_Source\PSoC5/CapSense_CSHL.c ****                         pos     = maximum;
1057:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posPrev = maximum - 1u;
1058:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posNext = maximum + 1u; 
1059:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1060:Generated_Source\PSoC5/CapSense_CSHL.c ****                     else
1061:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1062:Generated_Source\PSoC5/CapSense_CSHL.c ****                         pos     = diplex[maximum];
1063:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posPrev = diplex[maximum - 1u];
1064:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posNext = diplex[maximum + 1u];
1065:Generated_Source\PSoC5/CapSense_CSHL.c ****                         count <<= 1u;
1066:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }                    
1067:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #elif (CapSense_IS_DIPLEX_SLIDER)
1068:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Calculate next and previous near to maximum */
1069:Generated_Source\PSoC5/CapSense_CSHL.c ****                     pos     = diplex[maximum];
1070:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posPrev = diplex[maximum - 1u];
1071:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posNext = diplex[maximum + 1u];
1072:Generated_Source\PSoC5/CapSense_CSHL.c ****                     count <<= 1u;                    
1073:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #else                    
1074:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Calculate next and previous near to maximum */
1075:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (maximum >= 1u)
1076:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1077:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posPrev = maximum - 1u;
1078:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1079:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posNext = maximum + 1u; 
1080:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #endif /* (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER) */
1081:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
1082:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Copy Signal for found centriod */
1083:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #if (CapSense_IS_DIPLEX_SLIDER)
1084:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS] = startOfSlider[pos];
1085:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #else
1086:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS] = startOfSlider[maximum];
1087:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1088:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
1089:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Check borders for LINEAR Slider */
1090:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (maximum == 0u)                   /* Start of centroid */
1091:Generated_Source\PSoC5/CapSense_CSHL.c ****                 { 
1092:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = 0u;
1093:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[posNext];
1094:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1095:Generated_Source\PSoC5/CapSense_CSHL.c ****                 else if (maximum == ((count) - 1u)) /* End of centroid */
1096:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1097:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[posPrev];
1098:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = 0u;
1099:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1100:Generated_Source\PSoC5/CapSense_CSHL.c ****                 else                                /* Not first Not last */
1101:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1102:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[posPrev];
1103:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[posNext];
1104:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1105:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT>0u)||(CapSense_TOTAL_TOUCH_PADS_COUNT>0
1106:Generated_Source\PSoC5/CapSense_CSHL.c **** 
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 31


1107:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_ADD_SLIDER_TYPE)
1108:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1109:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_ADD_SLIDER_TYPE) */
1110:Generated_Source\PSoC5/CapSense_CSHL.c ****     
1111:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Subtract noiseThreshold */
1112:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(CapSense_centroid[CapSense_POS_PREV] > noiseThreshold)
1113:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1114:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_PREV] -= noiseThreshold;
1115:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1116:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
1117:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1118:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_PREV] = 0u;
1119:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1120:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1121:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Maximum always grater than fingerThreshold, so grate than noiseThreshold */
1122:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_centroid[CapSense_POS] -= noiseThreshold;
1123:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1124:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Subtract noiseThreshold */
1125:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(CapSense_centroid[CapSense_POS_NEXT] > noiseThreshold)
1126:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1127:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_NEXT] -= noiseThreshold;
1128:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1129:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
1130:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1131:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_NEXT] = 0u;
1132:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1133:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1134:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1135:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Si+1 - Si-1 */
1136:Generated_Source\PSoC5/CapSense_CSHL.c ****         numerator = (uint32) CapSense_centroid[CapSense_POS_NEXT] -
1137:Generated_Source\PSoC5/CapSense_CSHL.c ****                     (uint32) CapSense_centroid[CapSense_POS_PREV];
1138:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1139:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Si+1 + Si + Si-1 */
1140:Generated_Source\PSoC5/CapSense_CSHL.c ****         denominator = (int32) CapSense_centroid[CapSense_POS_PREV] + 
1141:Generated_Source\PSoC5/CapSense_CSHL.c ****                       (int32) CapSense_centroid[CapSense_POS] + 
1142:Generated_Source\PSoC5/CapSense_CSHL.c ****                       (int32) CapSense_centroid[CapSense_POS_NEXT];
1143:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1144:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* (numerator/denominator) + maximum */
1145:Generated_Source\PSoC5/CapSense_CSHL.c ****         denominator = (((int32)(uint32)((uint32)numerator << 8u)/denominator) + (int32)(uint32)((ui
1146:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1147:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if(CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
1148:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Only required for RADIAL Slider */
1149:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(denominator < 0)
1150:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1151:Generated_Source\PSoC5/CapSense_CSHL.c ****                 denominator += (int32)((uint16)((uint16) count << 8u));
1152:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1153:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1154:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1155:Generated_Source\PSoC5/CapSense_CSHL.c ****         denominator *= (int16)resolution;
1156:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1157:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Round the relust and put it to uint8 */
1158:Generated_Source\PSoC5/CapSense_CSHL.c ****         position = ((uint8) HI16((uint32)denominator + CapSense_CENTROID_ROUND_VALUE));
1159:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1160:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (position);
1161:Generated_Source\PSoC5/CapSense_CSHL.c ****     }    
1162:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* (CapSense_TOTAL_CENTROIDS_COUNT) */
1163:Generated_Source\PSoC5/CapSense_CSHL.c **** 
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 32


1164:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1165:Generated_Source\PSoC5/CapSense_CSHL.c **** #if(CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u)
1166:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1167:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_GetCentroidPos
1168:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1169:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1170:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1171:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Checks the CapSense_Signal[ ] array for a centroid within
1172:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  slider specified range. The centroid position is calculated to the resolution
1173:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  specified in the CapSense customizer. The position filters are applied to the
1174:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  result if enabled.
1175:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1176:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1177:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  widget:  Widget number.
1178:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  For every linear slider widget there are defines in this format:
1179:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  #define CapSense_LS__"widget_name"            5
1180:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
1181:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1182:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns position value of the linear slider.
1183:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1184:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Side Effects:
1185:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If any sensor within the slider widget is active, the function returns values
1186:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  from zero to the API resolution value set in the CapSense customizer. If no
1187:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  sensors are active, the function returns 0xFFFF. If an error occurs during
1188:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  execution of the centroid/diplexing algorithm, the function returns 0xFFFF.
1189:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  There are no checks of widget type argument provided to this function.
1190:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The unproper widget type provided will cause unexpected position calculations.
1191:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1192:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Note:
1193:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If noise counts on the slider segments are greater than the noise
1194:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  threshold, this subroutine may generate a false centroid result. The noise
1195:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  threshold should be set carefully (high enough above the noise level) so
1196:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  that noise will not generate a false centroid.
1197:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1198:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Reentrant:
1199:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  No.
1200:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1201:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1202:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_GetCentroidPos(uint8 widget) 
1203:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1204:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1205:Generated_Source\PSoC5/CapSense_CSHL.c ****             const uint8 CYCODE *diplex;
1206:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1207:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
1208:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
1209:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posIndex;
1210:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 firstTimeIndex = CapSense_posFiltersData[widget];
1211:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posFiltersMask = CapSense_posFiltersMask[widget];  
1212:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1213:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1214:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1215:Generated_Source\PSoC5/CapSense_CSHL.c ****              (0u != (CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1216:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 tempPos;
1217:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1218:Generated_Source\PSoC5/CapSense_CSHL.c ****                *   (0u != (CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1219:Generated_Source\PSoC5/CapSense_CSHL.c ****                */
1220:Generated_Source\PSoC5/CapSense_CSHL.c **** 
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 33


1221:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maximum;
1222:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 position;
1223:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 offset = CapSense_rawDataIndex[widget];
1224:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 count = CapSense_numberOfSensors[widget];
1225:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
1226:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1227:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(widget < CapSense_TOTAL_DIPLEXED_SLIDERS_COUNT)
1228:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1229:Generated_Source\PSoC5/CapSense_CSHL.c ****                 maximum = CapSense_diplexTable[widget];
1230:Generated_Source\PSoC5/CapSense_CSHL.c ****                 diplex = &CapSense_diplexTable[maximum];
1231:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1232:Generated_Source\PSoC5/CapSense_CSHL.c ****             else
1233:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1234:Generated_Source\PSoC5/CapSense_CSHL.c ****                 diplex = 0u;
1235:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1236:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1237:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1238:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Find Maximum within centroid */      
1239:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)        
1240:Generated_Source\PSoC5/CapSense_CSHL.c ****             maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], diplex)
1241:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
1242:Generated_Source\PSoC5/CapSense_CSHL.c ****             maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
1243:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1244:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1245:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (maximum != 0xFFu)
1246:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1247:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Calculate centroid */
1248:Generated_Source\PSoC5/CapSense_CSHL.c ****             position = (uint16) CapSense_CalcCentroid(maximum, 
1249:Generated_Source\PSoC5/CapSense_CSHL.c ****                          offset, count, CapSense_centroidMult[widget], CapSense_noiseThreshold[widg
1250:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1251:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
1252:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Check if this linear slider has enabled filters */
1253:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1254:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1255:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Caluclate position to store filters data */
1256:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posIndex  = firstTimeIndex + 1u;
1257:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
1258:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (0u == CapSense_posFiltersData[firstTimeIndex])
1259:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1260:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Init filters */
1261:Generated_Source\PSoC5/CapSense_CSHL.c ****                         CapSense_posFiltersData[posIndex] = (uint8) position;
1262:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if ((0u != (CapSense_MEDIAN_FILTER & \
1263:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1264:Generated_Source\PSoC5/CapSense_CSHL.c ****                              (0u != (CapSense_AVERAGING_FILTER & \
1265:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1266:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1267:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER)) || 
1268:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
1269:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1270:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] = (uint8) position;
1271:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1272:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
1273:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1274:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *   (0u != (CapSense_AVERAGING_FILTER & \
1275:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1276:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1277:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 34


1278:Generated_Source\PSoC5/CapSense_CSHL.c ****                         CapSense_posFiltersData[firstTimeIndex] = 1u;
1279:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1280:Generated_Source\PSoC5/CapSense_CSHL.c ****                     else
1281:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1282:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Do filtering */
1283:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MA
1284:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
1285:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1286:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1287:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_MedianFilter(position,
1288:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1289:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1290:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] =
1291:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
1292:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1293:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1294:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /*(0u != (CapSense_MEDIAN_FILTER &
1295:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *         CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1296:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1297:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1298:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if(0u!=(CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MA
1299:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) 
1300:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1301:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1302:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_AveragingFilter(position,
1303:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1304:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1305:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex+1u]=CapSense_posFiltersData[posInd
1306:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1307:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1308:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_AVERAGING_FILTER & \
1309:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1310:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1311:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1312:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR2_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK
1313:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR2_FILTER)) 
1314:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1315:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_IIR2Filter(position,
1316:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1317:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1318:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1319:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR2_FILTER & \
1320:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1321:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1322:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1323:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR4_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK
1324:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
1325:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1326:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_IIR4Filter(position,
1327:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1328:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1329:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }                                
1330:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR4_FILTER & \
1331:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1332:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1333:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1334:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_JITTER_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MA
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 35


1335:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
1336:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1337:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_JitterFilter(position,
1338:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1339:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1340:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1341:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_JITTER_FILTER & \
1342:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1343:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1344:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1345:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1346:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1347:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1348:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1349:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
1350:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1351:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* The maximum wasn't found */
1352:Generated_Source\PSoC5/CapSense_CSHL.c ****             position = 0xFFFFu;
1353:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1354:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if(0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
1355:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Reset the filters */
1356:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if(0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1357:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1358:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_posFiltersData[firstTimeIndex] = 0u;
1359:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1360:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1361:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1362:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1363:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1364:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (position);
1365:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1366:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* (CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) */
1367:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1368:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1369:Generated_Source\PSoC5/CapSense_CSHL.c **** #if(CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
1370:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1371:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_GetRadialCentroidPos
1372:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1373:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1374:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1375:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Checks the CapSense_Signal[ ] array for a centroid within
1376:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  slider specified range. The centroid position is calculated to the resolution
1377:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  specified in the CapSense customizer. The position filters are applied to the
1378:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  result if enabled.
1379:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1380:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1381:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  widget:  Widget number.
1382:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  For every radial slider widget there are defines in this format:
1383:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  #define CapSense_RS_"widget_name"            5
1384:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
1385:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1386:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns position value of the radial slider.
1387:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1388:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Side Effects:
1389:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If any sensor within the slider widget is active, the function returns values
1390:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  from zero to the API resolution value set in the CapSense customizer. If no
1391:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  sensors are active, the function returns 0xFFFF.
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 36


1392:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  There are no checks of widget type argument provided to this function.
1393:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The unproper widget type provided will cause unexpected position calculations.
1394:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1395:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Note:
1396:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If noise counts on the slider segments are greater than the noise
1397:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  threshold, this subroutine may generate a false centroid result. The noise
1398:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  threshold should be set carefully (high enough above the noise level) so 
1399:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  that noise will not generate a false centroid.
1400:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1401:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1402:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Reentrant:
1403:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  No.
1404:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1405:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1406:Generated_Source\PSoC5/CapSense_CSHL.c ****      uint16 CapSense_GetRadialCentroidPos(uint8 widget)
1407:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                       
1408:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1409:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
1410:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posIndex;
1411:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 firstTimeIndex = CapSense_posFiltersData[widget];
1412:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posFiltersMask = CapSense_posFiltersMask[widget]; 
1413:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
1414:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1415:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1416:Generated_Source\PSoC5/CapSense_CSHL.c ****              (0u != (CapSense_AVERAGING_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1417:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 tempPos;
1418:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1419:Generated_Source\PSoC5/CapSense_CSHL.c ****                *   (0u != (CapSense_AVERAGING_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1420:Generated_Source\PSoC5/CapSense_CSHL.c ****                */
1421:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1422:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maximum;
1423:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 position;
1424:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 offset = CapSense_rawDataIndex[widget];
1425:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 count = CapSense_numberOfSensors[widget];
1426:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1427:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Find Maximum within centroid */        
1428:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1429:Generated_Source\PSoC5/CapSense_CSHL.c ****             maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], 0u);
1430:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
1431:Generated_Source\PSoC5/CapSense_CSHL.c ****             maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
1432:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1433:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1434:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (maximum != 0xFFu)
1435:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1436:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Calculate centroid */
1437:Generated_Source\PSoC5/CapSense_CSHL.c ****             position = (uint16) CapSense_CalcCentroid(maximum, 
1438:Generated_Source\PSoC5/CapSense_CSHL.c ****                          offset, count, CapSense_centroidMult[widget], CapSense_noiseThreshold[widg
1439:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1440:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
1441:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Check if this Radial slider has enabled filters */
1442:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1443:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1444:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Caluclate position to store filters data */
1445:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posIndex  = firstTimeIndex + 1u;
1446:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
1447:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (0u == CapSense_posFiltersData[firstTimeIndex])
1448:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 37


1449:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Init filters */
1450:Generated_Source\PSoC5/CapSense_CSHL.c ****                         CapSense_posFiltersData[posIndex] = (uint8) position;
1451:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if ((0u != (CapSense_MEDIAN_FILTER & \
1452:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1453:Generated_Source\PSoC5/CapSense_CSHL.c ****                              (0u != (CapSense_AVERAGING_FILTER & \
1454:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1455:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1456:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))  || 
1457:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
1458:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1459:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] = (uint8) position;
1460:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1461:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
1462:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1463:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *   (0u != (CapSense_AVERAGING_FILTER & \
1464:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1465:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1466:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
1467:Generated_Source\PSoC5/CapSense_CSHL.c ****                         CapSense_posFiltersData[firstTimeIndex] = 1u;
1468:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1469:Generated_Source\PSoC5/CapSense_CSHL.c ****                     else
1470:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1471:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Do filtering */
1472:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MA
1473:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
1474:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1475:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1476:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_MedianFilter(position,
1477:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                         CapSense_posFiltersData[pos
1478:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                         CapSense_posFiltersData[pos
1479:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] = 
1480:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                               CapSense_posFiltersDa
1481:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1482:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1483:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_MEDIAN_FILTER & 
1484:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1485:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1486:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1487:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_AVERAGING_FILTER & \
1488:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1489:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER))
1490:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1491:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1492:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_AveragingFilter(position, 
1493:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posI
1494:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posI
1495:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex+1u]= CapSense_posFiltersData[posIn
1496:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1497:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1498:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_AVERAGING_FILTER & \
1499:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1500:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1501:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1502:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR2_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK
1503:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR2_FILTER))
1504:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1505:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_IIR2Filter(position,
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 38


1506:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1507:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1508:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1509:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR2_FILTER & 
1510:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1511:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1512:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1513:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR4_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK
1514:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
1515:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1516:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_IIR4Filter(position,
1517:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1518:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1519:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1520:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR4_FILTER & 
1521:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1522:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1523:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1524:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_JITTER_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MA
1525:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
1526:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1527:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_JitterFilter(position, 
1528:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                          CapSense_posFiltersData[po
1529:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1530:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1531:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_JITTER_FILTER &
1532:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1533:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1534:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1535:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1536:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
1537:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1538:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1539:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
1540:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1541:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* The maximum didn't find */
1542:Generated_Source\PSoC5/CapSense_CSHL.c ****             position = 0xFFFFu;
1543:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1544:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
1545:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Reset the filters */
1546:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if((posFiltersMask & CapSense_ANY_POS_FILTER) != 0u)
1547:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1548:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_posFiltersData[firstTimeIndex] = 0u;
1549:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1550:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
1551:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1552:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1553:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (position);
1554:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1555:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif
1556:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1557:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1558:Generated_Source\PSoC5/CapSense_CSHL.c **** #if(CapSense_TOTAL_TOUCH_PADS_COUNT > 0u)
1559:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1560:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_GetTouchCentroidPos
1561:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1562:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 39


1563:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1564:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If a finger is present on touch pad, this function calculates the X and Y
1565:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  position of the finger by calculating the centroids within touch pad specified
1566:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  range. The X and Y positions are calculated to the API resolutions set in the
1567:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  CapSense customizer. Returns a 1 if a finger is on the touchpad.
1568:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The position filter is applied to the result if enabled.
1569:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  This function is available only if a touch pad is defined by the CapSense
1570:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  customizer.
1571:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1572:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1573:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  widget:  Widget number. 
1574:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  For every touchpad widget there are defines in this format:
1575:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  #define CapSense_TP_"widget_name"            5
1576:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1577:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  pos:     Pointer to the array of two uint16 elements, where result
1578:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  result of calculation of X and Y position are stored.
1579:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  pos[0u]  - position of X
1580:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  pos[1u]  - position of Y
1581:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1582:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1583:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns a 1 if a finger is on the touch pad, 0 - if not.
1584:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1585:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Side Effects:
1586:Generated_Source\PSoC5/CapSense_CSHL.c ****     *   There are no checks of widget type argument provided to this function.
1587:Generated_Source\PSoC5/CapSense_CSHL.c ****     *   The unproper widget type provided will cause unexpected position
1588:Generated_Source\PSoC5/CapSense_CSHL.c ****     *   calculations.
1589:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1590:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Reentrant:
1591:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  No.
1592:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1593:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1594:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 CapSense_GetTouchCentroidPos(uint8 widget, uint16* pos)
1595:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                    
1596:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1597:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
1598:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posXIndex;
1599:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posYIndex;
1600:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 firstTimeIndex = CapSense_posFiltersData[widget];
1601:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posFiltersMask = CapSense_posFiltersMask[widget];
1602:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
1603:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1604:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
1605:Generated_Source\PSoC5/CapSense_CSHL.c ****              (0u != (CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
1606:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint16 tempPos;
1607:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
1608:Generated_Source\PSoC5/CapSense_CSHL.c ****                *   (0u != (CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
1609:Generated_Source\PSoC5/CapSense_CSHL.c ****                */
1610:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1611:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maxX;
1612:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maxY;
1613:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 posX;
1614:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 posY;
1615:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 touch = 0u;
1616:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 offset = CapSense_rawDataIndex[widget];
1617:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 count = CapSense_numberOfSensors[widget];
1618:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1619:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Find Maximum within X centroid */
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 40


1620:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1621:Generated_Source\PSoC5/CapSense_CSHL.c ****             maxX = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], 0u);
1622:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
1623:Generated_Source\PSoC5/CapSense_CSHL.c ****             maxX = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
1624:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1625:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1626:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (maxX != 0xFFu)
1627:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1628:Generated_Source\PSoC5/CapSense_CSHL.c ****             offset = CapSense_rawDataIndex[widget + 1u];
1629:Generated_Source\PSoC5/CapSense_CSHL.c ****             count = CapSense_numberOfSensors[widget + 1u];
1630:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1631:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Find Maximum within Y centroid */
1632:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (CapSense_IS_DIPLEX_SLIDER)
1633:Generated_Source\PSoC5/CapSense_CSHL.c ****                 maxY = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget + 1u], 0
1634:Generated_Source\PSoC5/CapSense_CSHL.c ****             #else
1635:Generated_Source\PSoC5/CapSense_CSHL.c ****                 maxY = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget + 1u]);
1636:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1637:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1638:Generated_Source\PSoC5/CapSense_CSHL.c ****             if (maxY != 0xFFu)
1639:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1640:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* X and Y maximums are found = true touch */
1641:Generated_Source\PSoC5/CapSense_CSHL.c ****                 touch = 1u;
1642:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
1643:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Calculate Y centroid */
1644:Generated_Source\PSoC5/CapSense_CSHL.c ****                 posY = CapSense_CalcCentroid(maxY, offset, count, 
1645:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_centroidMult[widget + 1u], CapSense_noiseThreshold[widget + 1u
1646:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
1647:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Calculate X centroid */
1648:Generated_Source\PSoC5/CapSense_CSHL.c ****                 offset = CapSense_rawDataIndex[widget];
1649:Generated_Source\PSoC5/CapSense_CSHL.c ****                 count = CapSense_numberOfSensors[widget];
1650:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
1651:Generated_Source\PSoC5/CapSense_CSHL.c ****                 posX = CapSense_CalcCentroid(maxX, offset, count, 
1652:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_centroidMult[widget],CapSense_noiseThreshold[widget]);
1653:Generated_Source\PSoC5/CapSense_CSHL.c ****     
1654:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
1655:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Check if this TP has enabled filters */
1656:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1657:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1658:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Caluclate position to store filters data */
1659:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posXIndex  = firstTimeIndex + 1u;
1660:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posYIndex  = CapSense_posFiltersData[widget + 1u];
1661:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
1662:Generated_Source\PSoC5/CapSense_CSHL.c ****                         if (0u == CapSense_posFiltersData[firstTimeIndex])
1663:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
1664:Generated_Source\PSoC5/CapSense_CSHL.c ****                             /* Init filters */
1665:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_posFiltersData[posXIndex] = posX;
1666:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_posFiltersData[posYIndex] = posY;
1667:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1668:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if((0u != (CapSense_MEDIAN_FILTER & \
1669:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         CapSense_TOUCH_PADS_POS_FILTERS_MASK))|| \
1670:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 (0u != (CapSense_AVERAGING_FILTER & \
1671:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
1672:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1673:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER)) || 
1674:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
1675:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1676:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex + 1u] = posX;
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 41


1677:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex + 1u] = posY;
1678:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1679:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
1680:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
1681:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *    (0u != (CapSense_AVERAGING_FILTER & \
1682:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *            CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
1683:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1684:Generated_Source\PSoC5/CapSense_CSHL.c ****                             
1685:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_posFiltersData[firstTimeIndex] = 1u;
1686:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
1687:Generated_Source\PSoC5/CapSense_CSHL.c ****                         else
1688:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
1689:Generated_Source\PSoC5/CapSense_CSHL.c ****                             /* Do filtering */
1690:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if (0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MA
1691:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
1692:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1693:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     tempPos = posX;
1694:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_MedianFilter(posX,
1695:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posXI
1696:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posXI
1697:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex + 1u] = 
1698:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
1699:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = tempPos;
1700:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     
1701:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     tempPos = posY;
1702:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_MedianFilter(posY,
1703:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posY
1704:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posY
1705:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex + 1u] = 
1706:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
1707:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = tempPos;
1708:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1709:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 
1710:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_MEDIAN_FILTER & \
1711:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *          CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1712:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1713:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1714:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if(0u !=(CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_M
1715:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER))
1716:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1717:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     tempPos = posX;
1718:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_AveragingFilter(posX,
1719:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posX
1720:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posX
1721:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex + 1u] = 
1722:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
1723:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = tempPos;
1724:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     
1725:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     tempPos = posY;
1726:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_AveragingFilter(posY, 
1727:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posYI
1728:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posYI
1729:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex + 1u] = 
1730:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
1731:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = tempPos;
1732:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1733:Generated_Source\PSoC5/CapSense_CSHL.c **** 
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 42


1734:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_AVERAGING_FILTER & \
1735:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1736:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1737:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1738:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if (0u != (CapSense_IIR2_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK
1739:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_IIR2_FILTER))
1740:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1741:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_IIR2Filter(posX, 
1742:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                            CapSense_posFiltersData[
1743:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = posX;
1744:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     
1745:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_IIR2Filter(posY, 
1746:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
1747:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = posY;
1748:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1749:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 
1750:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_IIR2_FILTER & \
1751:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *          CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1752:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1753:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1754:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if (0u != (CapSense_IIR4_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK
1755:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
1756:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1757:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_IIR4Filter((uint16)posX,
1758:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1759:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = posX;
1760:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1761:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_IIR4Filter((uint16)posY,
1762:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1763:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = posY;
1764:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1765:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 
1766:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_IIR4_FILTER & \
1767:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1768:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1769:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1770:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if (0u != (CapSense_JITTER_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MA
1771:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
1772:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     {
1773:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         posX = (uint8) CapSense_JitterFilter(posX, 
1774:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
1775:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         CapSense_posFiltersData[posXIndex] = posX;
1776:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         
1777:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         posY = (uint8) CapSense_JitterFilter(posY, 
1778:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
1779:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         CapSense_posFiltersData[posYIndex] = posY;
1780:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     }
1781:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_JITTER_FILTER & \
1782:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1783:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1784:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
1785:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1786:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
1787:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1788:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Save positions */
1789:Generated_Source\PSoC5/CapSense_CSHL.c ****                 pos[0u] = posX;
1790:Generated_Source\PSoC5/CapSense_CSHL.c ****                 pos[1u] = posY;
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 43


1791:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1792:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1793:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1794:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
1795:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(touch == 0u)
1796:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1797:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Reset the filters */
1798:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if ((posFiltersMask & CapSense_ANY_POS_FILTER) != 0u)
1799:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1800:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_posFiltersData[firstTimeIndex] = 0u;
1801:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1802:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1803:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
1804:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1805:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (touch);
1806:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1807:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* (CapSense_TOTAL_TOUCH_PADS_COUNT > 0u) */
1808:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1809:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1810:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
1811:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_POS_FILTERS_MASK & CapSense_MEDIAN_FILTER) )
1812:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1813:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_MedianFilter
1814:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1815:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1816:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1817:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Median filter function. 
1818:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The median filter looks at the three most recent samples and reports the 
1819:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  median value.
1820:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1821:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1822:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x1:  Current value.
1823:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x2:  Previous value.
1824:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x3:  Before previous value.
1825:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1826:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1827:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns filtered value.
1828:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1829:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1830:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_MedianFilter(uint16 x1, uint16 x2, uint16 x3)
1831:Generated_Source\PSoC5/CapSense_CSHL.c ****                                          
1832:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1833:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 tmp;
1834:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1835:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (x1 > x2)
1836:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1837:Generated_Source\PSoC5/CapSense_CSHL.c ****             tmp = x2;
1838:Generated_Source\PSoC5/CapSense_CSHL.c ****             x2 = x1;
1839:Generated_Source\PSoC5/CapSense_CSHL.c ****             x1 = tmp;
1840:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1841:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1842:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (x2 > x3)
1843:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1844:Generated_Source\PSoC5/CapSense_CSHL.c ****             x2 = x3;
1845:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1846:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1847:Generated_Source\PSoC5/CapSense_CSHL.c ****         return ((x1 > x2) ? x1 : x2);
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 44


1848:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1849:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
1850:Generated_Source\PSoC5/CapSense_CSHL.c ****        *    (CapSense_POS_FILTERS_MASK & CapSense_MEDIAN_FILTER) )
1851:Generated_Source\PSoC5/CapSense_CSHL.c ****        */
1852:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1853:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1854:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) | \
1855:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_POS_FILTERS_MASK & CapSense_AVERAGING_FILTER) )
1856:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1857:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_AveragingFilter
1858:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1859:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1860:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1861:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Averaging filter function.
1862:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The averaging filter looks at the three most recent samples of position and
1863:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  reports the averaging value.
1864:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1865:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1866:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x1:  Current value.
1867:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x2:  Previous value.
1868:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x3:  Before previous value.
1869:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1870:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1871:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns filtered value.
1872:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1873:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1874:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_AveragingFilter(uint16 x1, uint16 x2, uint16 x3)
1875:Generated_Source\PSoC5/CapSense_CSHL.c ****                                             
1876:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1877:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint32 tmp = ((uint32)x1 + (uint32)x2 + (uint32)x3) / 3u;
1878:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1879:Generated_Source\PSoC5/CapSense_CSHL.c ****         return ((uint16) tmp);
1880:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1881:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) | \
1882:Generated_Source\PSoC5/CapSense_CSHL.c ****        *    (CapSense_POS_FILTERS_MASK & CapSense_AVERAGING_FILTER) )
1883:Generated_Source\PSoC5/CapSense_CSHL.c ****        */
1884:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1885:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1886:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) | \
1887:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_POS_FILTERS_MASK & CapSense_IIR2_FILTER) )
1888:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1889:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_IIR2Filter
1890:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1891:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1892:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1893:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  IIR1/2 filter function. IIR1/2 = 1/2current + 1/2previous.
1894:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1895:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1896:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x1:  Current value.
1897:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x2:  Previous value.
1898:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1899:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1900:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns filtered value.
1901:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1902:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1903:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_IIR2Filter(uint16 x1, uint16 x2)
1904:Generated_Source\PSoC5/CapSense_CSHL.c ****                                        
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 45


1905:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1906:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint32 tmp;
1907:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1908:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* IIR = 1/2 Current Value+ 1/2 Previous Value */
1909:Generated_Source\PSoC5/CapSense_CSHL.c ****         tmp = (uint32)x1 + (uint32)x2;
1910:Generated_Source\PSoC5/CapSense_CSHL.c ****         tmp >>= 1u;
1911:Generated_Source\PSoC5/CapSense_CSHL.c ****     
1912:Generated_Source\PSoC5/CapSense_CSHL.c ****         return ((uint16) tmp);
1913:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1914:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) | \
1915:Generated_Source\PSoC5/CapSense_CSHL.c ****        *    (CapSense_POS_FILTERS_MASK & CapSense_IIR2_FILTER) )
1916:Generated_Source\PSoC5/CapSense_CSHL.c ****        */
1917:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1918:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1919:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER) | \
1920:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_POS_FILTERS_MASK & CapSense_IIR4_FILTER) )
1921:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1922:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_IIR4Filter
1923:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1924:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1925:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1926:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  IIR1/4 filter function. IIR1/4 = 1/4current + 3/4previous.
1927:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1928:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1929:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x1:  Current value.
1930:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x2:  Previous value.
1931:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1932:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1933:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns filtered value.
1934:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1935:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1936:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_IIR4Filter(uint16 x1, uint16 x2)
1937:Generated_Source\PSoC5/CapSense_CSHL.c ****                                        
1938:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 599              		.loc 1 1938 0
 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 0
 602              		@ frame_needed = 0, uses_anonymous_args = 0
 603              		@ link register save eliminated.
 604              	.LVL70:
1939:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint32 tmp;
1940:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1941:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* IIR = 1/4 Current Value + 3/4 Previous Value */
1942:Generated_Source\PSoC5/CapSense_CSHL.c ****         tmp = (uint32)x1 + (uint32)x2;
 605              		.loc 1 1942 0
 606 0000 0844     		add	r0, r0, r1
 607              	.LVL71:
1943:Generated_Source\PSoC5/CapSense_CSHL.c ****         tmp += ((uint32)x2 << 1u);
 608              		.loc 1 1943 0
 609 0002 00EB4100 		add	r0, r0, r1, lsl #1
 610              	.LVL72:
1944:Generated_Source\PSoC5/CapSense_CSHL.c ****         tmp >>= 2u;
1945:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1946:Generated_Source\PSoC5/CapSense_CSHL.c ****         return ((uint16) tmp);
1947:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 611              		.loc 1 1947 0
 612 0006 C0F38F00 		ubfx	r0, r0, #2, #16
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 46


 613              	.LVL73:
 614 000a 7047     		bx	lr
 615              		.cfi_endproc
 616              	.LFE11:
 617              		.size	CapSense_IIR4Filter, .-CapSense_IIR4Filter
 618              		.section	.text.CapSense_UpdateSensorBaseline,"ax",%progbits
 619              		.align	2
 620              		.global	CapSense_UpdateSensorBaseline
 621              		.thumb
 622              		.thumb_func
 623              		.type	CapSense_UpdateSensorBaseline, %function
 624              	CapSense_UpdateSensorBaseline:
 625              	.LFB4:
 350:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint32 calc;
 626              		.loc 1 350 0
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 0
 629              		@ frame_needed = 0, uses_anonymous_args = 0
 630              	.LVL74:
 631 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 632              		.cfi_def_cfa_offset 24
 633              		.cfi_offset 4, -24
 634              		.cfi_offset 5, -20
 635              		.cfi_offset 6, -16
 636              		.cfi_offset 7, -12
 637              		.cfi_offset 8, -8
 638              		.cfi_offset 14, -4
 639 0004 0446     		mov	r4, r0
 354:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 noiseThreshold = CapSense_noiseThreshold[widget];
 640              		.loc 1 354 0
 641 0006 314B     		ldr	r3, .L64
 642 0008 1B5C     		ldrb	r3, [r3, r0]	@ zero_extendqisi2
 643              	.LVL75:
 355:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 644              		.loc 1 355 0
 645 000a 314A     		ldr	r2, .L64+4
 646 000c 1344     		add	r3, r3, r2
 647              	.LVL76:
 648 000e 1E7B     		ldrb	r6, [r3, #12]	@ zero_extendqisi2
 649              	.LVL77:
 384:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 650              		.loc 1 384 0
 651 0010 304D     		ldr	r5, .L64+8
 652 0012 35F81010 		ldrh	r1, [r5, r0, lsl #1]
 653 0016 304B     		ldr	r3, .L64+12
 654              	.LVL78:
 655 0018 33F81000 		ldrh	r0, [r3, r0, lsl #1]
 656              	.LVL79:
 657 001c FFF7FEFF 		bl	CapSense_IIR4Filter
 658              	.LVL80:
 659 0020 0746     		mov	r7, r0
 660              	.LVL81:
 385:Generated_Source\PSoC5/CapSense_CSHL.c ****             
 661              		.loc 1 385 0
 662 0022 25F81400 		strh	r0, [r5, r4, lsl #1]	@ movhi
 404:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif /* (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING) */
 663              		.loc 1 404 0
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 47


 664 0026 2046     		mov	r0, r4
 665              	.LVL82:
 666 0028 FFF7FEFF 		bl	CapSense_CalculateThresholds
 667              	.LVL83:
 410:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 668              		.loc 1 410 0
 669 002c 2B4B     		ldr	r3, .L64+16
 670 002e 33F81420 		ldrh	r2, [r3, r4, lsl #1]
 671 0032 9742     		cmp	r7, r2
 672 0034 04D3     		bcc	.L54
 412:Generated_Source\PSoC5/CapSense_CSHL.c ****         widget = 1u;    /* Positive difference - Calculate the Signal */
 673              		.loc 1 412 0
 674 0036 BD1A     		subs	r5, r7, r2
 675 0038 ADB2     		uxth	r5, r5
 676              	.LVL84:
 413:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 677              		.loc 1 413 0
 678 003a 4FF00108 		mov	r8, #1
 679 003e 03E0     		b	.L55
 680              	.LVL85:
 681              	.L54:
 417:Generated_Source\PSoC5/CapSense_CSHL.c ****         widget = 0u;    /* Negative difference - Do NOT calculate the Signal */
 682              		.loc 1 417 0
 683 0040 D51B     		subs	r5, r2, r7
 684 0042 ADB2     		uxth	r5, r5
 685              	.LVL86:
 418:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 686              		.loc 1 418 0
 687 0044 4FF00008 		mov	r8, #0
 688              	.LVL87:
 689              	.L55:
 421:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 690              		.loc 1 421 0
 691 0048 B8F1000F 		cmp	r8, #0
 692 004c 10D1     		bne	.L56
 421:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 693              		.loc 1 421 0 is_stmt 0 discriminator 1
 694 004e 142D     		cmp	r5, #20
 695 0050 0ED9     		bls	.L56
 423:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 696              		.loc 1 423 0 is_stmt 1
 697 0052 234B     		ldr	r3, .L64+20
 698 0054 1B5D     		ldrb	r3, [r3, r4]	@ zero_extendqisi2
 699 0056 042B     		cmp	r3, #4
 700 0058 06D9     		bls	.L57
 425:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_lowBaselineResetCnt[sensor] = 0u;
 701              		.loc 1 425 0
 702 005a 2046     		mov	r0, r4
 703 005c FFF7FEFF 		bl	CapSense_BaseInit
 704              	.LVL88:
 426:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 705              		.loc 1 426 0
 706 0060 0022     		movs	r2, #0
 707 0062 1F4B     		ldr	r3, .L64+20
 708 0064 1A55     		strb	r2, [r3, r4]
 709 0066 1AE0     		b	.L58
 710              	.L57:
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 48


 430:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 711              		.loc 1 430 0
 712 0068 0133     		adds	r3, r3, #1
 713 006a 1D4A     		ldr	r2, .L64+20
 714 006c 1355     		strb	r3, [r2, r4]
 715 006e 16E0     		b	.L58
 716              	.L56:
 437:Generated_Source\PSoC5/CapSense_CSHL.c ****                  ((tempRaw < (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD)
 717              		.loc 1 437 0
 718 0070 B3B2     		uxth	r3, r6
 719 0072 9D42     		cmp	r5, r3
 720 0074 04D9     		bls	.L59
 437:Generated_Source\PSoC5/CapSense_CSHL.c ****                  ((tempRaw < (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD)
 721              		.loc 1 437 0 is_stmt 0 discriminator 1
 722 0076 132D     		cmp	r5, #19
 723 0078 11D8     		bhi	.L58
 439:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 724              		.loc 1 439 0 is_stmt 1
 725 007a B8F1000F 		cmp	r8, #0
 726 007e 0ED1     		bne	.L58
 727              	.L59:
 728              	.LVL89:
 444:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 729              		.loc 1 444 0
 730 0080 1849     		ldr	r1, .L64+24
 731 0082 0B5D     		ldrb	r3, [r1, r4]	@ zero_extendqisi2
 732 0084 43EA0223 		orr	r3, r3, r2, lsl #8
 733              	.LVL90:
 447:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 734              		.loc 1 447 0
 735 0088 1F44     		add	r7, r7, r3
 736              	.LVL91:
 450:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 737              		.loc 1 450 0
 738 008a BF1A     		subs	r7, r7, r2
 739              	.LVL92:
 453:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorBaselineLow[sensor] = ((uint8) calc);
 740              		.loc 1 453 0
 741 008c C7F30F22 		ubfx	r2, r7, #8, #16
 742 0090 124B     		ldr	r3, .L64+16
 743 0092 23F81420 		strh	r2, [r3, r4, lsl #1]	@ movhi
 454:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 744              		.loc 1 454 0
 745 0096 0F55     		strb	r7, [r1, r4]
 456:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE)
 746              		.loc 1 456 0
 747 0098 0022     		movs	r2, #0
 748 009a 114B     		ldr	r3, .L64+20
 749 009c 1A55     		strb	r2, [r3, r4]
 750              	.LVL93:
 751              	.L58:
 463:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 752              		.loc 1 463 0
 753 009e B6B2     		uxth	r6, r6
 754              	.LVL94:
 755 00a0 B542     		cmp	r5, r6
 756 00a2 0DD9     		bls	.L60
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 49


 463:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 757              		.loc 1 463 0 is_stmt 0 discriminator 1
 758 00a4 B8F1000F 		cmp	r8, #0
 759 00a8 0AD0     		beq	.L60
 467:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 760              		.loc 1 467 0 is_stmt 1
 761 00aa FF2D     		cmp	r5, #255
 762 00ac 04D9     		bls	.L61
 469:Generated_Source\PSoC5/CapSense_CSHL.c ****             }    
 763              		.loc 1 469 0
 764 00ae FF22     		movs	r2, #255
 765 00b0 0D4B     		ldr	r3, .L64+28
 766 00b2 1A55     		strb	r2, [r3, r4]
 767 00b4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 768              	.LVL95:
 769              	.L61:
 473:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 770              		.loc 1 473 0
 771 00b8 0B4B     		ldr	r3, .L64+28
 772 00ba 1D55     		strb	r5, [r3, r4]
 773 00bc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 774              	.LVL96:
 775              	.L60:
 482:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 776              		.loc 1 482 0
 777 00c0 0022     		movs	r2, #0
 778 00c2 094B     		ldr	r3, .L64+28
 779 00c4 1A55     		strb	r2, [r3, r4]
 780 00c6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 781              	.LVL97:
 782              	.L65:
 783 00ca 00BF     		.align	2
 784              	.L64:
 785 00cc 00000000 		.word	CapSense_widgetNumber
 786 00d0 00000000 		.word	.LANCHOR0
 787 00d4 00000000 		.word	CapSense_rawFilterData1
 788 00d8 00000000 		.word	CapSense_sensorRaw
 789 00dc 00000000 		.word	CapSense_sensorBaseline
 790 00e0 00000000 		.word	CapSense_lowBaselineResetCnt
 791 00e4 00000000 		.word	CapSense_sensorBaselineLow
 792 00e8 00000000 		.word	CapSense_sensorSignal
 793              		.cfi_endproc
 794              	.LFE4:
 795              		.size	CapSense_UpdateSensorBaseline, .-CapSense_UpdateSensorBaseline
 796              		.section	.text.CapSense_UpdateEnabledBaselines,"ax",%progbits
 797              		.align	2
 798              		.global	CapSense_UpdateEnabledBaselines
 799              		.thumb
 800              		.thumb_func
 801              		.type	CapSense_UpdateEnabledBaselines, %function
 802              	CapSense_UpdateEnabledBaselines:
 803              	.LFB5:
 523:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 i;
 804              		.loc 1 523 0
 805              		.cfi_startproc
 806              		@ args = 0, pretend = 0, frame = 0
 807              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 50


 808 0000 10B5     		push	{r4, lr}
 809              		.cfi_def_cfa_offset 8
 810              		.cfi_offset 4, -8
 811              		.cfi_offset 14, -4
 812              	.LVL98:
 528:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 813              		.loc 1 528 0
 814 0002 0024     		movs	r4, #0
 815 0004 0DE0     		b	.L67
 816              	.LVL99:
 817              	.L69:
 530:Generated_Source\PSoC5/CapSense_CSHL.c ****         enMask = (uint8)(0x01u << (i & 0x07u));
 818              		.loc 1 530 0
 819 0006 E208     		lsrs	r2, r4, #3
 531:Generated_Source\PSoC5/CapSense_CSHL.c ****         if((CapSense_sensorEnableMask[pos] & enMask) != 0u)
 820              		.loc 1 531 0
 821 0008 04F00701 		and	r1, r4, #7
 822 000c 0123     		movs	r3, #1
 823 000e 8B40     		lsls	r3, r3, r1
 824              	.LVL100:
 532:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 825              		.loc 1 532 0
 826 0010 0549     		ldr	r1, .L71
 827 0012 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 828 0014 1342     		tst	r3, r2
 829 0016 02D0     		beq	.L68
 534:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 830              		.loc 1 534 0
 831 0018 2046     		mov	r0, r4
 832 001a FFF7FEFF 		bl	CapSense_UpdateSensorBaseline
 833              	.LVL101:
 834              	.L68:
 528:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 835              		.loc 1 528 0 discriminator 2
 836 001e 0134     		adds	r4, r4, #1
 837              	.LVL102:
 838 0020 E4B2     		uxtb	r4, r4
 839              	.LVL103:
 840              	.L67:
 528:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 841              		.loc 1 528 0 is_stmt 0 discriminator 1
 842 0022 012C     		cmp	r4, #1
 843 0024 EFD9     		bls	.L69
 537:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 844              		.loc 1 537 0 is_stmt 1
 845 0026 10BD     		pop	{r4, pc}
 846              	.LVL104:
 847              	.L72:
 848              		.align	2
 849              	.L71:
 850 0028 00000000 		.word	CapSense_sensorEnableMask
 851              		.cfi_endproc
 852              	.LFE5:
 853              		.size	CapSense_UpdateEnabledBaselines, .-CapSense_UpdateEnabledBaselines
 854              		.global	CapSense_numberOfSensors
 855              		.global	CapSense_rawDataIndex
 856              		.global	CapSense_debounceCounter
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 51


 857              		.global	CapSense_debounce
 858              		.global	CapSense_hysteresis
 859              		.global	CapSense_noiseThreshold
 860              		.global	CapSense_fingerThreshold
 861              		.comm	CapSense_lowBaselineResetCnt,2,4
 862              		.comm	CapSense_sensorOnMask,1,4
 863              		.comm	CapSense_sensorSignal,2,4
 864              		.comm	CapSense_sensorBaselineLow,2,4
 865              		.comm	CapSense_sensorBaseline,4,4
 866              		.comm	CapSense_rawFilterData1,4,4
 867              		.section	.rodata
 868              		.align	2
 869              		.set	.LANCHOR2,. + 0
 870              		.type	CapSense_rawDataIndex, %object
 871              		.size	CapSense_rawDataIndex, 2
 872              	CapSense_rawDataIndex:
 873 0000 00       		.byte	0
 874 0001 01       		.byte	1
 875 0002 0000     		.space	2
 876              		.type	CapSense_numberOfSensors, %object
 877              		.size	CapSense_numberOfSensors, 2
 878              	CapSense_numberOfSensors:
 879 0004 01       		.byte	1
 880 0005 01       		.byte	1
 881              		.data
 882              		.align	2
 883              		.set	.LANCHOR0,. + 0
 884              		.type	CapSense_debounce, %object
 885              		.size	CapSense_debounce, 2
 886              	CapSense_debounce:
 887 0000 01       		.byte	1
 888 0001 01       		.byte	1
 889 0002 0000     		.space	2
 890              		.type	CapSense_fingerThreshold, %object
 891              		.size	CapSense_fingerThreshold, 2
 892              	CapSense_fingerThreshold:
 893 0004 64       		.byte	100
 894 0005 64       		.byte	100
 895 0006 0000     		.space	2
 896              		.type	CapSense_hysteresis, %object
 897              		.size	CapSense_hysteresis, 2
 898              	CapSense_hysteresis:
 899 0008 0A       		.byte	10
 900 0009 0A       		.byte	10
 901 000a 0000     		.space	2
 902              		.type	CapSense_noiseThreshold, %object
 903              		.size	CapSense_noiseThreshold, 2
 904              	CapSense_noiseThreshold:
 905 000c 14       		.byte	20
 906 000d 14       		.byte	20
 907              		.bss
 908              		.align	2
 909              		.set	.LANCHOR1,. + 0
 910              		.type	CapSense_debounceCounter, %object
 911              		.size	CapSense_debounceCounter, 3
 912              	CapSense_debounceCounter:
 913 0000 000000   		.space	3
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 52


 914              		.text
 915              	.Letext0:
 916              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 917              		.file 3 "Generated_Source\\PSoC5\\CapSense.h"
 918              		.file 4 "Generated_Source\\PSoC5\\CapSense_CSHL.h"
 919              		.section	.debug_info,"",%progbits
 920              	.Ldebug_info0:
 921 0000 A9060000 		.4byte	0x6a9
 922 0004 0400     		.2byte	0x4
 923 0006 00000000 		.4byte	.Ldebug_abbrev0
 924 000a 04       		.byte	0x4
 925 000b 01       		.uleb128 0x1
 926 000c DF030000 		.4byte	.LASF64
 927 0010 0C       		.byte	0xc
 928 0011 D9040000 		.4byte	.LASF65
 929 0015 51000000 		.4byte	.LASF66
 930 0019 00000000 		.4byte	.Ldebug_ranges0+0
 931 001d 00000000 		.4byte	0
 932 0021 00000000 		.4byte	.Ldebug_line0
 933 0025 02       		.uleb128 0x2
 934 0026 01       		.byte	0x1
 935 0027 06       		.byte	0x6
 936 0028 18010000 		.4byte	.LASF0
 937 002c 02       		.uleb128 0x2
 938 002d 01       		.byte	0x1
 939 002e 08       		.byte	0x8
 940 002f 8A030000 		.4byte	.LASF1
 941 0033 02       		.uleb128 0x2
 942 0034 02       		.byte	0x2
 943 0035 05       		.byte	0x5
 944 0036 C7030000 		.4byte	.LASF2
 945 003a 02       		.uleb128 0x2
 946 003b 02       		.byte	0x2
 947 003c 07       		.byte	0x7
 948 003d 30020000 		.4byte	.LASF3
 949 0041 02       		.uleb128 0x2
 950 0042 04       		.byte	0x4
 951 0043 05       		.byte	0x5
 952 0044 5A010000 		.4byte	.LASF4
 953 0048 02       		.uleb128 0x2
 954 0049 04       		.byte	0x4
 955 004a 07       		.byte	0x7
 956 004b ED010000 		.4byte	.LASF5
 957 004f 02       		.uleb128 0x2
 958 0050 08       		.byte	0x8
 959 0051 05       		.byte	0x5
 960 0052 0A010000 		.4byte	.LASF6
 961 0056 02       		.uleb128 0x2
 962 0057 08       		.byte	0x8
 963 0058 07       		.byte	0x7
 964 0059 99000000 		.4byte	.LASF7
 965 005d 03       		.uleb128 0x3
 966 005e 04       		.byte	0x4
 967 005f 05       		.byte	0x5
 968 0060 696E7400 		.ascii	"int\000"
 969 0064 02       		.uleb128 0x2
 970 0065 04       		.byte	0x4
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 53


 971 0066 07       		.byte	0x7
 972 0067 E0010000 		.4byte	.LASF8
 973 006b 04       		.uleb128 0x4
 974 006c 83010000 		.4byte	.LASF9
 975 0070 02       		.byte	0x2
 976 0071 E801     		.2byte	0x1e8
 977 0073 2C000000 		.4byte	0x2c
 978 0077 04       		.uleb128 0x4
 979 0078 00000000 		.4byte	.LASF10
 980 007c 02       		.byte	0x2
 981 007d E901     		.2byte	0x1e9
 982 007f 3A000000 		.4byte	0x3a
 983 0083 04       		.uleb128 0x4
 984 0084 A6010000 		.4byte	.LASF11
 985 0088 02       		.byte	0x2
 986 0089 EA01     		.2byte	0x1ea
 987 008b 48000000 		.4byte	0x48
 988 008f 02       		.uleb128 0x2
 989 0090 04       		.byte	0x4
 990 0091 04       		.byte	0x4
 991 0092 67030000 		.4byte	.LASF12
 992 0096 02       		.uleb128 0x2
 993 0097 08       		.byte	0x8
 994 0098 04       		.byte	0x4
 995 0099 89010000 		.4byte	.LASF13
 996 009d 02       		.uleb128 0x2
 997 009e 01       		.byte	0x1
 998 009f 08       		.byte	0x8
 999 00a0 C6040000 		.4byte	.LASF14
 1000 00a4 02       		.uleb128 0x2
 1001 00a5 08       		.byte	0x8
 1002 00a6 04       		.byte	0x4
 1003 00a7 CC020000 		.4byte	.LASF15
 1004 00ab 02       		.uleb128 0x2
 1005 00ac 04       		.byte	0x4
 1006 00ad 07       		.byte	0x7
 1007 00ae AD020000 		.4byte	.LASF16
 1008 00b2 05       		.uleb128 0x5
 1009 00b3 6D040000 		.4byte	.LASF17
 1010 00b7 01       		.byte	0x1
 1011 00b8 7B       		.byte	0x7b
 1012 00b9 00000000 		.4byte	.LFB0
 1013 00bd 50000000 		.4byte	.LFE0-.LFB0
 1014 00c1 01       		.uleb128 0x1
 1015 00c2 9C       		.byte	0x9c
 1016 00c3 E4000000 		.4byte	0xe4
 1017 00c7 06       		.uleb128 0x6
 1018 00c8 43020000 		.4byte	.LASF19
 1019 00cc 01       		.byte	0x1
 1020 00cd 7B       		.byte	0x7b
 1021 00ce 6B000000 		.4byte	0x6b
 1022 00d2 01       		.uleb128 0x1
 1023 00d3 50       		.byte	0x50
 1024 00d4 07       		.uleb128 0x7
 1025 00d5 D1030000 		.4byte	.LASF21
 1026 00d9 01       		.byte	0x1
 1027 00da 7F       		.byte	0x7f
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 54


 1028 00db 6B000000 		.4byte	0x6b
 1029 00df 00000000 		.4byte	.LLST0
 1030 00e3 00       		.byte	0
 1031 00e4 05       		.uleb128 0x5
 1032 00e5 D8020000 		.4byte	.LASF18
 1033 00e9 01       		.byte	0x1
 1034 00ea C4       		.byte	0xc4
 1035 00eb 00000000 		.4byte	.LFB1
 1036 00ef 18000000 		.4byte	.LFE1-.LFB1
 1037 00f3 01       		.uleb128 0x1
 1038 00f4 9C       		.byte	0x9c
 1039 00f5 36010000 		.4byte	0x136
 1040 00f9 08       		.uleb128 0x8
 1041 00fa 43020000 		.4byte	.LASF19
 1042 00fe 01       		.byte	0x1
 1043 00ff C4       		.byte	0xc4
 1044 0100 6B000000 		.4byte	0x6b
 1045 0104 13000000 		.4byte	.LLST1
 1046 0108 09       		.uleb128 0x9
 1047 0109 08000000 		.4byte	.LVL4
 1048 010d 80060000 		.4byte	0x680
 1049 0111 1C010000 		.4byte	0x11c
 1050 0115 0A       		.uleb128 0xa
 1051 0116 01       		.uleb128 0x1
 1052 0117 50       		.byte	0x50
 1053 0118 02       		.uleb128 0x2
 1054 0119 74       		.byte	0x74
 1055 011a 00       		.sleb128 0
 1056 011b 00       		.byte	0
 1057 011c 0B       		.uleb128 0xb
 1058 011d 0C000000 		.4byte	.LVL5
 1059 0121 8B060000 		.4byte	0x68b
 1060 0125 0C       		.uleb128 0xc
 1061 0126 16000000 		.4byte	.LVL6
 1062 012a B2000000 		.4byte	0xb2
 1063 012e 0A       		.uleb128 0xa
 1064 012f 01       		.uleb128 0x1
 1065 0130 50       		.byte	0x50
 1066 0131 02       		.uleb128 0x2
 1067 0132 74       		.byte	0x74
 1068 0133 00       		.sleb128 0
 1069 0134 00       		.byte	0
 1070 0135 00       		.byte	0
 1071 0136 05       		.uleb128 0x5
 1072 0137 98030000 		.4byte	.LASF20
 1073 013b 01       		.byte	0x1
 1074 013c F8       		.byte	0xf8
 1075 013d 00000000 		.4byte	.LFB2
 1076 0141 16000000 		.4byte	.LFE2-.LFB2
 1077 0145 01       		.uleb128 0x1
 1078 0146 9C       		.byte	0x9c
 1079 0147 69010000 		.4byte	0x169
 1080 014b 0D       		.uleb128 0xd
 1081 014c 6900     		.ascii	"i\000"
 1082 014e 01       		.byte	0x1
 1083 014f FB       		.byte	0xfb
 1084 0150 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 55


 1085 0154 34000000 		.4byte	.LLST2
 1086 0158 0C       		.uleb128 0xc
 1087 0159 0C000000 		.4byte	.LVL9
 1088 015d E4000000 		.4byte	0xe4
 1089 0161 0A       		.uleb128 0xa
 1090 0162 01       		.uleb128 0x1
 1091 0163 50       		.byte	0x50
 1092 0164 02       		.uleb128 0x2
 1093 0165 74       		.byte	0x74
 1094 0166 00       		.sleb128 0
 1095 0167 00       		.byte	0
 1096 0168 00       		.byte	0
 1097 0169 0E       		.uleb128 0xe
 1098 016a C6000000 		.4byte	.LASF22
 1099 016e 01       		.byte	0x1
 1100 016f 1901     		.2byte	0x119
 1101 0171 00000000 		.4byte	.LFB3
 1102 0175 44000000 		.4byte	.LFE3-.LFB3
 1103 0179 01       		.uleb128 0x1
 1104 017a 9C       		.byte	0x9c
 1105 017b CE010000 		.4byte	0x1ce
 1106 017f 0F       		.uleb128 0xf
 1107 0180 6900     		.ascii	"i\000"
 1108 0182 01       		.byte	0x1
 1109 0183 1C01     		.2byte	0x11c
 1110 0185 6B000000 		.4byte	0x6b
 1111 0189 5E000000 		.4byte	.LLST3
 1112 018d 10       		.uleb128 0x10
 1113 018e 706F7300 		.ascii	"pos\000"
 1114 0192 01       		.byte	0x1
 1115 0193 1D01     		.2byte	0x11d
 1116 0195 6B000000 		.4byte	0x6b
 1117 0199 01       		.uleb128 0x1
 1118 019a 52       		.byte	0x52
 1119 019b 11       		.uleb128 0x11
 1120 019c 17030000 		.4byte	.LASF23
 1121 01a0 01       		.byte	0x1
 1122 01a1 1E01     		.2byte	0x11e
 1123 01a3 6B000000 		.4byte	0x6b
 1124 01a7 7C000000 		.4byte	.LLST4
 1125 01ab 0B       		.uleb128 0xb
 1126 01ac 06000000 		.4byte	.LVL12
 1127 01b0 96060000 		.4byte	0x696
 1128 01b4 0B       		.uleb128 0xb
 1129 01b5 0A000000 		.4byte	.LVL13
 1130 01b9 8B060000 		.4byte	0x68b
 1131 01bd 0C       		.uleb128 0xc
 1132 01be 32000000 		.4byte	.LVL17
 1133 01c2 B2000000 		.4byte	0xb2
 1134 01c6 0A       		.uleb128 0xa
 1135 01c7 01       		.uleb128 0x1
 1136 01c8 50       		.byte	0x50
 1137 01c9 02       		.uleb128 0x2
 1138 01ca 74       		.byte	0x74
 1139 01cb 00       		.sleb128 0
 1140 01cc 00       		.byte	0
 1141 01cd 00       		.byte	0
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 56


 1142 01ce 12       		.uleb128 0x12
 1143 01cf FA020000 		.4byte	.LASF29
 1144 01d3 01       		.byte	0x1
 1145 01d4 4302     		.2byte	0x243
 1146 01d6 6B000000 		.4byte	0x6b
 1147 01da 00000000 		.4byte	.LFB6
 1148 01de 88000000 		.4byte	.LFE6-.LFB6
 1149 01e2 01       		.uleb128 0x1
 1150 01e3 9C       		.byte	0x9c
 1151 01e4 5F020000 		.4byte	0x25f
 1152 01e8 13       		.uleb128 0x13
 1153 01e9 43020000 		.4byte	.LASF19
 1154 01ed 01       		.byte	0x1
 1155 01ee 4302     		.2byte	0x243
 1156 01f0 6B000000 		.4byte	0x6b
 1157 01f4 B1000000 		.4byte	.LLST5
 1158 01f8 14       		.uleb128 0x14
 1159 01f9 CB040000 		.4byte	.LASF25
 1160 01fd 01       		.byte	0x1
 1161 01fe 4602     		.2byte	0x246
 1162 0200 6B000000 		.4byte	0x6b
 1163 0204 0F       		.uleb128 0xf
 1164 0205 706F7300 		.ascii	"pos\000"
 1165 0209 01       		.byte	0x1
 1166 020a 4802     		.2byte	0x248
 1167 020c 6B000000 		.4byte	0x6b
 1168 0210 EB000000 		.4byte	.LLST6
 1169 0214 15       		.uleb128 0x15
 1170 0215 D8030000 		.4byte	.LASF24
 1171 0219 01       		.byte	0x1
 1172 021a 4902     		.2byte	0x249
 1173 021c 6B000000 		.4byte	0x6b
 1174 0220 01       		.uleb128 0x1
 1175 0221 53       		.byte	0x53
 1176 0222 14       		.uleb128 0x14
 1177 0223 D1030000 		.4byte	.LASF21
 1178 0227 01       		.byte	0x1
 1179 0228 4B02     		.2byte	0x24b
 1180 022a 6B000000 		.4byte	0x6b
 1181 022e 11       		.uleb128 0x11
 1182 022f 41000000 		.4byte	.LASF26
 1183 0233 01       		.byte	0x1
 1184 0234 4C02     		.2byte	0x24c
 1185 0236 6B000000 		.4byte	0x6b
 1186 023a FE000000 		.4byte	.LLST7
 1187 023e 11       		.uleb128 0x11
 1188 023f AD010000 		.4byte	.LASF27
 1189 0243 01       		.byte	0x1
 1190 0244 4D02     		.2byte	0x24d
 1191 0246 6B000000 		.4byte	0x6b
 1192 024a 11010000 		.4byte	.LLST8
 1193 024e 11       		.uleb128 0x11
 1194 024f A4020000 		.4byte	.LASF28
 1195 0253 01       		.byte	0x1
 1196 0254 4E02     		.2byte	0x24e
 1197 0256 6B000000 		.4byte	0x6b
 1198 025a 53010000 		.4byte	.LLST9
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 57


 1199 025e 00       		.byte	0
 1200 025f 12       		.uleb128 0x12
 1201 0260 6D030000 		.4byte	.LASF30
 1202 0264 01       		.byte	0x1
 1203 0265 8B02     		.2byte	0x28b
 1204 0267 6B000000 		.4byte	0x6b
 1205 026b 00000000 		.4byte	.LFB7
 1206 026f 2C000000 		.4byte	.LFE7-.LFB7
 1207 0273 01       		.uleb128 0x1
 1208 0274 9C       		.byte	0x9c
 1209 0275 CA020000 		.4byte	0x2ca
 1210 0279 13       		.uleb128 0x13
 1211 027a D1030000 		.4byte	.LASF21
 1212 027e 01       		.byte	0x1
 1213 027f 8B02     		.2byte	0x28b
 1214 0281 6B000000 		.4byte	0x6b
 1215 0285 66010000 		.4byte	.LLST10
 1216 0289 11       		.uleb128 0x11
 1217 028a 3B010000 		.4byte	.LASF31
 1218 028e 01       		.byte	0x1
 1219 028f 8E02     		.2byte	0x28e
 1220 0291 6B000000 		.4byte	0x6b
 1221 0295 87010000 		.4byte	.LLST11
 1222 0299 11       		.uleb128 0x11
 1223 029a 44010000 		.4byte	.LASF32
 1224 029e 01       		.byte	0x1
 1225 029f 8F02     		.2byte	0x28f
 1226 02a1 6B000000 		.4byte	0x6b
 1227 02a5 A5010000 		.4byte	.LLST12
 1228 02a9 11       		.uleb128 0x11
 1229 02aa 54010000 		.4byte	.LASF33
 1230 02ae 01       		.byte	0x1
 1231 02af 9002     		.2byte	0x290
 1232 02b1 6B000000 		.4byte	0x6b
 1233 02b5 B8010000 		.4byte	.LLST13
 1234 02b9 0C       		.uleb128 0xc
 1235 02ba 16000000 		.4byte	.LVL39
 1236 02be CE010000 		.4byte	0x1ce
 1237 02c2 0A       		.uleb128 0xa
 1238 02c3 01       		.uleb128 0x1
 1239 02c4 50       		.byte	0x50
 1240 02c5 02       		.uleb128 0x2
 1241 02c6 74       		.byte	0x74
 1242 02c7 00       		.sleb128 0
 1243 02c8 00       		.byte	0
 1244 02c9 00       		.byte	0
 1245 02ca 12       		.uleb128 0x12
 1246 02cb 63010000 		.4byte	.LASF34
 1247 02cf 01       		.byte	0x1
 1248 02d0 B702     		.2byte	0x2b7
 1249 02d2 6B000000 		.4byte	0x6b
 1250 02d6 00000000 		.4byte	.LFB8
 1251 02da 1E000000 		.4byte	.LFE8-.LFB8
 1252 02de 01       		.uleb128 0x1
 1253 02df 9C       		.byte	0x9c
 1254 02e0 13030000 		.4byte	0x313
 1255 02e4 0F       		.uleb128 0xf
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 58


 1256 02e5 6900     		.ascii	"i\000"
 1257 02e7 01       		.byte	0x1
 1258 02e8 BA02     		.2byte	0x2ba
 1259 02ea 6B000000 		.4byte	0x6b
 1260 02ee D7010000 		.4byte	.LLST14
 1261 02f2 11       		.uleb128 0x11
 1262 02f3 54010000 		.4byte	.LASF33
 1263 02f7 01       		.byte	0x1
 1264 02f8 BB02     		.2byte	0x2bb
 1265 02fa 6B000000 		.4byte	0x6b
 1266 02fe 01020000 		.4byte	.LLST15
 1267 0302 0C       		.uleb128 0xc
 1268 0303 0E000000 		.4byte	.LVL46
 1269 0307 5F020000 		.4byte	0x25f
 1270 030b 0A       		.uleb128 0xa
 1271 030c 01       		.uleb128 0x1
 1272 030d 50       		.byte	0x50
 1273 030e 02       		.uleb128 0x2
 1274 030f 74       		.byte	0x74
 1275 0310 00       		.sleb128 0
 1276 0311 00       		.byte	0
 1277 0312 00       		.byte	0
 1278 0313 0E       		.uleb128 0xe
 1279 0314 B6020000 		.4byte	.LASF35
 1280 0318 01       		.byte	0x1
 1281 0319 E502     		.2byte	0x2e5
 1282 031b 00000000 		.4byte	.LFB9
 1283 031f 38000000 		.4byte	.LFE9-.LFB9
 1284 0323 01       		.uleb128 0x1
 1285 0324 9C       		.byte	0x9c
 1286 0325 78030000 		.4byte	0x378
 1287 0329 13       		.uleb128 0x13
 1288 032a D1030000 		.4byte	.LASF21
 1289 032e 01       		.byte	0x1
 1290 032f E502     		.2byte	0x2e5
 1291 0331 6B000000 		.4byte	0x6b
 1292 0335 20020000 		.4byte	.LLST16
 1293 0339 10       		.uleb128 0x10
 1294 033a 706F7300 		.ascii	"pos\000"
 1295 033e 01       		.byte	0x1
 1296 033f E802     		.2byte	0x2e8
 1297 0341 6B000000 		.4byte	0x6b
 1298 0345 01       		.uleb128 0x1
 1299 0346 50       		.byte	0x50
 1300 0347 11       		.uleb128 0x11
 1301 0348 17030000 		.4byte	.LASF23
 1302 034c 01       		.byte	0x1
 1303 034d E902     		.2byte	0x2e9
 1304 034f 6B000000 		.4byte	0x6b
 1305 0353 41020000 		.4byte	.LLST17
 1306 0357 11       		.uleb128 0x11
 1307 0358 3B010000 		.4byte	.LASF31
 1308 035c 01       		.byte	0x1
 1309 035d EA02     		.2byte	0x2ea
 1310 035f 6B000000 		.4byte	0x6b
 1311 0363 76020000 		.4byte	.LLST18
 1312 0367 11       		.uleb128 0x11
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 59


 1313 0368 44010000 		.4byte	.LASF32
 1314 036c 01       		.byte	0x1
 1315 036d EB02     		.2byte	0x2eb
 1316 036f 6B000000 		.4byte	0x6b
 1317 0373 94020000 		.4byte	.LLST19
 1318 0377 00       		.byte	0
 1319 0378 0E       		.uleb128 0xe
 1320 0379 24010000 		.4byte	.LASF36
 1321 037d 01       		.byte	0x1
 1322 037e 1703     		.2byte	0x317
 1323 0380 00000000 		.4byte	.LFB10
 1324 0384 38000000 		.4byte	.LFE10-.LFB10
 1325 0388 01       		.uleb128 0x1
 1326 0389 9C       		.byte	0x9c
 1327 038a DD030000 		.4byte	0x3dd
 1328 038e 13       		.uleb128 0x13
 1329 038f D1030000 		.4byte	.LASF21
 1330 0393 01       		.byte	0x1
 1331 0394 1703     		.2byte	0x317
 1332 0396 6B000000 		.4byte	0x6b
 1333 039a A7020000 		.4byte	.LLST20
 1334 039e 10       		.uleb128 0x10
 1335 039f 706F7300 		.ascii	"pos\000"
 1336 03a3 01       		.byte	0x1
 1337 03a4 1A03     		.2byte	0x31a
 1338 03a6 6B000000 		.4byte	0x6b
 1339 03aa 01       		.uleb128 0x1
 1340 03ab 50       		.byte	0x50
 1341 03ac 11       		.uleb128 0x11
 1342 03ad 17030000 		.4byte	.LASF23
 1343 03b1 01       		.byte	0x1
 1344 03b2 1B03     		.2byte	0x31b
 1345 03b4 6B000000 		.4byte	0x6b
 1346 03b8 C8020000 		.4byte	.LLST21
 1347 03bc 11       		.uleb128 0x11
 1348 03bd 3B010000 		.4byte	.LASF31
 1349 03c1 01       		.byte	0x1
 1350 03c2 1C03     		.2byte	0x31c
 1351 03c4 6B000000 		.4byte	0x6b
 1352 03c8 FD020000 		.4byte	.LLST22
 1353 03cc 11       		.uleb128 0x11
 1354 03cd 44010000 		.4byte	.LASF32
 1355 03d1 01       		.byte	0x1
 1356 03d2 1D03     		.2byte	0x31d
 1357 03d4 6B000000 		.4byte	0x6b
 1358 03d8 1B030000 		.4byte	.LLST23
 1359 03dc 00       		.byte	0
 1360 03dd 12       		.uleb128 0x12
 1361 03de B8010000 		.4byte	.LASF37
 1362 03e2 01       		.byte	0x1
 1363 03e3 9007     		.2byte	0x790
 1364 03e5 77000000 		.4byte	0x77
 1365 03e9 00000000 		.4byte	.LFB11
 1366 03ed 0C000000 		.4byte	.LFE11-.LFB11
 1367 03f1 01       		.uleb128 0x1
 1368 03f2 9C       		.byte	0x9c
 1369 03f3 24040000 		.4byte	0x424
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 60


 1370 03f7 16       		.uleb128 0x16
 1371 03f8 783100   		.ascii	"x1\000"
 1372 03fb 01       		.byte	0x1
 1373 03fc 9007     		.2byte	0x790
 1374 03fe 77000000 		.4byte	0x77
 1375 0402 2E030000 		.4byte	.LLST24
 1376 0406 17       		.uleb128 0x17
 1377 0407 783200   		.ascii	"x2\000"
 1378 040a 01       		.byte	0x1
 1379 040b 9007     		.2byte	0x790
 1380 040d 77000000 		.4byte	0x77
 1381 0411 01       		.uleb128 0x1
 1382 0412 51       		.byte	0x51
 1383 0413 0F       		.uleb128 0xf
 1384 0414 746D7000 		.ascii	"tmp\000"
 1385 0418 01       		.byte	0x1
 1386 0419 9307     		.2byte	0x793
 1387 041b 83000000 		.4byte	0x83
 1388 041f 4F030000 		.4byte	.LLST25
 1389 0423 00       		.byte	0
 1390 0424 0E       		.uleb128 0xe
 1391 0425 64020000 		.4byte	.LASF38
 1392 0429 01       		.byte	0x1
 1393 042a 5C01     		.2byte	0x15c
 1394 042c 00000000 		.4byte	.LFB4
 1395 0430 EC000000 		.4byte	.LFE4-.LFB4
 1396 0434 01       		.uleb128 0x1
 1397 0435 9C       		.byte	0x9c
 1398 0436 C8040000 		.4byte	0x4c8
 1399 043a 13       		.uleb128 0x13
 1400 043b 43020000 		.4byte	.LASF19
 1401 043f 01       		.byte	0x1
 1402 0440 5C01     		.2byte	0x15c
 1403 0442 6B000000 		.4byte	0x6b
 1404 0446 71030000 		.4byte	.LLST26
 1405 044a 11       		.uleb128 0x11
 1406 044b 82020000 		.4byte	.LASF39
 1407 044f 01       		.byte	0x1
 1408 0450 5F01     		.2byte	0x15f
 1409 0452 83000000 		.4byte	0x83
 1410 0456 92030000 		.4byte	.LLST27
 1411 045a 11       		.uleb128 0x11
 1412 045b 48050000 		.4byte	.LASF40
 1413 045f 01       		.byte	0x1
 1414 0460 6001     		.2byte	0x160
 1415 0462 77000000 		.4byte	0x77
 1416 0466 BF030000 		.4byte	.LLST28
 1417 046a 11       		.uleb128 0x11
 1418 046b 07000000 		.4byte	.LASF41
 1419 046f 01       		.byte	0x1
 1420 0470 6101     		.2byte	0x161
 1421 0472 77000000 		.4byte	0x77
 1422 0476 DD030000 		.4byte	.LLST29
 1423 047a 11       		.uleb128 0x11
 1424 047b D1030000 		.4byte	.LASF21
 1425 047f 01       		.byte	0x1
 1426 0480 6201     		.2byte	0x162
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 61


 1427 0482 6B000000 		.4byte	0x6b
 1428 0486 01040000 		.4byte	.LLST30
 1429 048a 11       		.uleb128 0x11
 1430 048b B8030000 		.4byte	.LASF42
 1431 048f 01       		.byte	0x1
 1432 0490 6301     		.2byte	0x163
 1433 0492 6B000000 		.4byte	0x6b
 1434 0496 4A040000 		.4byte	.LLST31
 1435 049a 0B       		.uleb128 0xb
 1436 049b 20000000 		.4byte	.LVL80
 1437 049f DD030000 		.4byte	0x3dd
 1438 04a3 09       		.uleb128 0x9
 1439 04a4 2C000000 		.4byte	.LVL83
 1440 04a8 A1060000 		.4byte	0x6a1
 1441 04ac B7040000 		.4byte	0x4b7
 1442 04b0 0A       		.uleb128 0xa
 1443 04b1 01       		.uleb128 0x1
 1444 04b2 50       		.byte	0x50
 1445 04b3 02       		.uleb128 0x2
 1446 04b4 74       		.byte	0x74
 1447 04b5 00       		.sleb128 0
 1448 04b6 00       		.byte	0
 1449 04b7 0C       		.uleb128 0xc
 1450 04b8 60000000 		.4byte	.LVL88
 1451 04bc B2000000 		.4byte	0xb2
 1452 04c0 0A       		.uleb128 0xa
 1453 04c1 01       		.uleb128 0x1
 1454 04c2 50       		.byte	0x50
 1455 04c3 02       		.uleb128 0x2
 1456 04c4 74       		.byte	0x74
 1457 04c5 00       		.sleb128 0
 1458 04c6 00       		.byte	0
 1459 04c7 00       		.byte	0
 1460 04c8 0E       		.uleb128 0xe
 1461 04c9 EA000000 		.4byte	.LASF43
 1462 04cd 01       		.byte	0x1
 1463 04ce 0902     		.2byte	0x209
 1464 04d0 00000000 		.4byte	.LFB5
 1465 04d4 2C000000 		.4byte	.LFE5-.LFB5
 1466 04d8 01       		.uleb128 0x1
 1467 04d9 9C       		.byte	0x9c
 1468 04da 1B050000 		.4byte	0x51b
 1469 04de 0F       		.uleb128 0xf
 1470 04df 6900     		.ascii	"i\000"
 1471 04e1 01       		.byte	0x1
 1472 04e2 0C02     		.2byte	0x20c
 1473 04e4 6B000000 		.4byte	0x6b
 1474 04e8 5D040000 		.4byte	.LLST32
 1475 04ec 10       		.uleb128 0x10
 1476 04ed 706F7300 		.ascii	"pos\000"
 1477 04f1 01       		.byte	0x1
 1478 04f2 0D02     		.2byte	0x20d
 1479 04f4 6B000000 		.4byte	0x6b
 1480 04f8 01       		.uleb128 0x1
 1481 04f9 52       		.byte	0x52
 1482 04fa 11       		.uleb128 0x11
 1483 04fb 17030000 		.4byte	.LASF23
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 62


 1484 04ff 01       		.byte	0x1
 1485 0500 0E02     		.2byte	0x20e
 1486 0502 6B000000 		.4byte	0x6b
 1487 0506 87040000 		.4byte	.LLST33
 1488 050a 0C       		.uleb128 0xc
 1489 050b 1E000000 		.4byte	.LVL101
 1490 050f 24040000 		.4byte	0x424
 1491 0513 0A       		.uleb128 0xa
 1492 0514 01       		.uleb128 0x1
 1493 0515 50       		.byte	0x50
 1494 0516 02       		.uleb128 0x2
 1495 0517 74       		.byte	0x74
 1496 0518 00       		.sleb128 0
 1497 0519 00       		.byte	0
 1498 051a 00       		.byte	0
 1499 051b 18       		.uleb128 0x18
 1500 051c 77000000 		.4byte	0x77
 1501 0520 2B050000 		.4byte	0x52b
 1502 0524 19       		.uleb128 0x19
 1503 0525 AB000000 		.4byte	0xab
 1504 0529 01       		.byte	0x1
 1505 052a 00       		.byte	0
 1506 052b 1A       		.uleb128 0x1a
 1507 052c 00050000 		.4byte	.LASF44
 1508 0530 03       		.byte	0x3
 1509 0531 BA02     		.2byte	0x2ba
 1510 0533 1B050000 		.4byte	0x51b
 1511 0537 1B       		.uleb128 0x1b
 1512 0538 4F030000 		.4byte	.LASF45
 1513 053c 01       		.byte	0x1
 1514 053d 21       		.byte	0x21
 1515 053e 1B050000 		.4byte	0x51b
 1516 0542 05       		.uleb128 0x5
 1517 0543 03       		.byte	0x3
 1518 0544 00000000 		.4byte	CapSense_rawFilterData1
 1519 0548 18       		.uleb128 0x18
 1520 0549 6B000000 		.4byte	0x6b
 1521 054d 58050000 		.4byte	0x558
 1522 0551 19       		.uleb128 0x19
 1523 0552 AB000000 		.4byte	0xab
 1524 0556 00       		.byte	0
 1525 0557 00       		.byte	0
 1526 0558 1A       		.uleb128 0x1a
 1527 0559 4A020000 		.4byte	.LASF46
 1528 055d 04       		.byte	0x4
 1529 055e 0401     		.2byte	0x104
 1530 0560 48050000 		.4byte	0x548
 1531 0564 18       		.uleb128 0x18
 1532 0565 74050000 		.4byte	0x574
 1533 0569 74050000 		.4byte	0x574
 1534 056d 19       		.uleb128 0x19
 1535 056e AB000000 		.4byte	0xab
 1536 0572 01       		.byte	0x1
 1537 0573 00       		.byte	0
 1538 0574 1C       		.uleb128 0x1c
 1539 0575 6B000000 		.4byte	0x6b
 1540 0579 1A       		.uleb128 0x1a
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 63


 1541 057a 90010000 		.4byte	.LASF47
 1542 057e 04       		.byte	0x4
 1543 057f 0501     		.2byte	0x105
 1544 0581 85050000 		.4byte	0x585
 1545 0585 1C       		.uleb128 0x1c
 1546 0586 64050000 		.4byte	0x564
 1547 058a 1B       		.uleb128 0x1b
 1548 058b AE040000 		.4byte	.LASF48
 1549 058f 01       		.byte	0x1
 1550 0590 29       		.byte	0x29
 1551 0591 1B050000 		.4byte	0x51b
 1552 0595 05       		.uleb128 0x5
 1553 0596 03       		.byte	0x3
 1554 0597 00000000 		.4byte	CapSense_sensorBaseline
 1555 059b 18       		.uleb128 0x18
 1556 059c 6B000000 		.4byte	0x6b
 1557 05a0 AB050000 		.4byte	0x5ab
 1558 05a4 19       		.uleb128 0x19
 1559 05a5 AB000000 		.4byte	0xab
 1560 05a9 01       		.byte	0x1
 1561 05aa 00       		.byte	0
 1562 05ab 1B       		.uleb128 0x1b
 1563 05ac FF010000 		.4byte	.LASF49
 1564 05b0 01       		.byte	0x1
 1565 05b1 2A       		.byte	0x2a
 1566 05b2 9B050000 		.4byte	0x59b
 1567 05b6 05       		.uleb128 0x5
 1568 05b7 03       		.byte	0x3
 1569 05b8 00000000 		.4byte	CapSense_sensorBaselineLow
 1570 05bc 1B       		.uleb128 0x1b
 1571 05bd B0000000 		.4byte	.LASF50
 1572 05c1 01       		.byte	0x1
 1573 05c2 2B       		.byte	0x2b
 1574 05c3 9B050000 		.4byte	0x59b
 1575 05c7 05       		.uleb128 0x5
 1576 05c8 03       		.byte	0x3
 1577 05c9 00000000 		.4byte	CapSense_sensorSignal
 1578 05cd 1B       		.uleb128 0x1b
 1579 05ce 2B000000 		.4byte	.LASF51
 1580 05d2 01       		.byte	0x1
 1581 05d3 2C       		.byte	0x2c
 1582 05d4 48050000 		.4byte	0x548
 1583 05d8 05       		.uleb128 0x5
 1584 05d9 03       		.byte	0x3
 1585 05da 00000000 		.4byte	CapSense_sensorOnMask
 1586 05de 1B       		.uleb128 0x1b
 1587 05df 7F040000 		.4byte	.LASF52
 1588 05e3 01       		.byte	0x1
 1589 05e4 2E       		.byte	0x2e
 1590 05e5 9B050000 		.4byte	0x59b
 1591 05e9 05       		.uleb128 0x5
 1592 05ea 03       		.byte	0x3
 1593 05eb 00000000 		.4byte	CapSense_lowBaselineResetCnt
 1594 05ef 1B       		.uleb128 0x1b
 1595 05f0 36030000 		.4byte	.LASF53
 1596 05f4 01       		.byte	0x1
 1597 05f5 30       		.byte	0x30
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 64


 1598 05f6 9B050000 		.4byte	0x59b
 1599 05fa 05       		.uleb128 0x5
 1600 05fb 03       		.byte	0x3
 1601 05fc 00000000 		.4byte	CapSense_fingerThreshold
 1602 0600 1B       		.uleb128 0x1b
 1603 0601 1E030000 		.4byte	.LASF54
 1604 0605 01       		.byte	0x1
 1605 0606 34       		.byte	0x34
 1606 0607 9B050000 		.4byte	0x59b
 1607 060b 05       		.uleb128 0x5
 1608 060c 03       		.byte	0x3
 1609 060d 00000000 		.4byte	CapSense_noiseThreshold
 1610 0611 1B       		.uleb128 0x1b
 1611 0612 17000000 		.4byte	.LASF55
 1612 0616 01       		.byte	0x1
 1613 0617 38       		.byte	0x38
 1614 0618 9B050000 		.4byte	0x59b
 1615 061c 05       		.uleb128 0x5
 1616 061d 03       		.byte	0x3
 1617 061e 00000000 		.4byte	CapSense_hysteresis
 1618 0622 1B       		.uleb128 0x1b
 1619 0623 9C040000 		.4byte	.LASF56
 1620 0627 01       		.byte	0x1
 1621 0628 3C       		.byte	0x3c
 1622 0629 9B050000 		.4byte	0x59b
 1623 062d 05       		.uleb128 0x5
 1624 062e 03       		.byte	0x3
 1625 062f 00000000 		.4byte	CapSense_debounce
 1626 0633 18       		.uleb128 0x18
 1627 0634 6B000000 		.4byte	0x6b
 1628 0638 43060000 		.4byte	0x643
 1629 063c 19       		.uleb128 0x19
 1630 063d AB000000 		.4byte	0xab
 1631 0641 02       		.byte	0x2
 1632 0642 00       		.byte	0
 1633 0643 1B       		.uleb128 0x1b
 1634 0644 2F050000 		.4byte	.LASF57
 1635 0648 01       		.byte	0x1
 1636 0649 40       		.byte	0x40
 1637 064a 33060000 		.4byte	0x633
 1638 064e 05       		.uleb128 0x5
 1639 064f 03       		.byte	0x3
 1640 0650 00000000 		.4byte	CapSense_debounceCounter
 1641 0654 1B       		.uleb128 0x1b
 1642 0655 1A020000 		.4byte	.LASF58
 1643 0659 01       		.byte	0x1
 1644 065a 44       		.byte	0x44
 1645 065b 65060000 		.4byte	0x665
 1646 065f 05       		.uleb128 0x5
 1647 0660 03       		.byte	0x3
 1648 0661 00000000 		.4byte	CapSense_rawDataIndex
 1649 0665 1C       		.uleb128 0x1c
 1650 0666 64050000 		.4byte	0x564
 1651 066a 1B       		.uleb128 0x1b
 1652 066b 60050000 		.4byte	.LASF59
 1653 066f 01       		.byte	0x1
 1654 0670 4A       		.byte	0x4a
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 65


 1655 0671 7B060000 		.4byte	0x67b
 1656 0675 05       		.uleb128 0x5
 1657 0676 03       		.byte	0x3
 1658 0677 00000000 		.4byte	CapSense_numberOfSensors
 1659 067b 1C       		.uleb128 0x1c
 1660 067c 64050000 		.4byte	0x564
 1661 0680 1D       		.uleb128 0x1d
 1662 0681 CC010000 		.4byte	.LASF60
 1663 0685 CC010000 		.4byte	.LASF60
 1664 0689 03       		.byte	0x3
 1665 068a 9A       		.byte	0x9a
 1666 068b 1D       		.uleb128 0x1d
 1667 068c 50050000 		.4byte	.LASF61
 1668 0690 50050000 		.4byte	.LASF61
 1669 0694 03       		.byte	0x3
 1670 0695 99       		.byte	0x99
 1671 0696 1D       		.uleb128 0x1d
 1672 0697 13050000 		.4byte	.LASF62
 1673 069b 13050000 		.4byte	.LASF62
 1674 069f 03       		.byte	0x3
 1675 06a0 9B       		.byte	0x9b
 1676 06a1 1D       		.uleb128 0x1d
 1677 06a2 87020000 		.4byte	.LASF63
 1678 06a6 87020000 		.4byte	.LASF63
 1679 06aa 04       		.byte	0x4
 1680 06ab C1       		.byte	0xc1
 1681 06ac 00       		.byte	0
 1682              		.section	.debug_abbrev,"",%progbits
 1683              	.Ldebug_abbrev0:
 1684 0000 01       		.uleb128 0x1
 1685 0001 11       		.uleb128 0x11
 1686 0002 01       		.byte	0x1
 1687 0003 25       		.uleb128 0x25
 1688 0004 0E       		.uleb128 0xe
 1689 0005 13       		.uleb128 0x13
 1690 0006 0B       		.uleb128 0xb
 1691 0007 03       		.uleb128 0x3
 1692 0008 0E       		.uleb128 0xe
 1693 0009 1B       		.uleb128 0x1b
 1694 000a 0E       		.uleb128 0xe
 1695 000b 55       		.uleb128 0x55
 1696 000c 17       		.uleb128 0x17
 1697 000d 11       		.uleb128 0x11
 1698 000e 01       		.uleb128 0x1
 1699 000f 10       		.uleb128 0x10
 1700 0010 17       		.uleb128 0x17
 1701 0011 00       		.byte	0
 1702 0012 00       		.byte	0
 1703 0013 02       		.uleb128 0x2
 1704 0014 24       		.uleb128 0x24
 1705 0015 00       		.byte	0
 1706 0016 0B       		.uleb128 0xb
 1707 0017 0B       		.uleb128 0xb
 1708 0018 3E       		.uleb128 0x3e
 1709 0019 0B       		.uleb128 0xb
 1710 001a 03       		.uleb128 0x3
 1711 001b 0E       		.uleb128 0xe
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 66


 1712 001c 00       		.byte	0
 1713 001d 00       		.byte	0
 1714 001e 03       		.uleb128 0x3
 1715 001f 24       		.uleb128 0x24
 1716 0020 00       		.byte	0
 1717 0021 0B       		.uleb128 0xb
 1718 0022 0B       		.uleb128 0xb
 1719 0023 3E       		.uleb128 0x3e
 1720 0024 0B       		.uleb128 0xb
 1721 0025 03       		.uleb128 0x3
 1722 0026 08       		.uleb128 0x8
 1723 0027 00       		.byte	0
 1724 0028 00       		.byte	0
 1725 0029 04       		.uleb128 0x4
 1726 002a 16       		.uleb128 0x16
 1727 002b 00       		.byte	0
 1728 002c 03       		.uleb128 0x3
 1729 002d 0E       		.uleb128 0xe
 1730 002e 3A       		.uleb128 0x3a
 1731 002f 0B       		.uleb128 0xb
 1732 0030 3B       		.uleb128 0x3b
 1733 0031 05       		.uleb128 0x5
 1734 0032 49       		.uleb128 0x49
 1735 0033 13       		.uleb128 0x13
 1736 0034 00       		.byte	0
 1737 0035 00       		.byte	0
 1738 0036 05       		.uleb128 0x5
 1739 0037 2E       		.uleb128 0x2e
 1740 0038 01       		.byte	0x1
 1741 0039 3F       		.uleb128 0x3f
 1742 003a 19       		.uleb128 0x19
 1743 003b 03       		.uleb128 0x3
 1744 003c 0E       		.uleb128 0xe
 1745 003d 3A       		.uleb128 0x3a
 1746 003e 0B       		.uleb128 0xb
 1747 003f 3B       		.uleb128 0x3b
 1748 0040 0B       		.uleb128 0xb
 1749 0041 27       		.uleb128 0x27
 1750 0042 19       		.uleb128 0x19
 1751 0043 11       		.uleb128 0x11
 1752 0044 01       		.uleb128 0x1
 1753 0045 12       		.uleb128 0x12
 1754 0046 06       		.uleb128 0x6
 1755 0047 40       		.uleb128 0x40
 1756 0048 18       		.uleb128 0x18
 1757 0049 9742     		.uleb128 0x2117
 1758 004b 19       		.uleb128 0x19
 1759 004c 01       		.uleb128 0x1
 1760 004d 13       		.uleb128 0x13
 1761 004e 00       		.byte	0
 1762 004f 00       		.byte	0
 1763 0050 06       		.uleb128 0x6
 1764 0051 05       		.uleb128 0x5
 1765 0052 00       		.byte	0
 1766 0053 03       		.uleb128 0x3
 1767 0054 0E       		.uleb128 0xe
 1768 0055 3A       		.uleb128 0x3a
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 67


 1769 0056 0B       		.uleb128 0xb
 1770 0057 3B       		.uleb128 0x3b
 1771 0058 0B       		.uleb128 0xb
 1772 0059 49       		.uleb128 0x49
 1773 005a 13       		.uleb128 0x13
 1774 005b 02       		.uleb128 0x2
 1775 005c 18       		.uleb128 0x18
 1776 005d 00       		.byte	0
 1777 005e 00       		.byte	0
 1778 005f 07       		.uleb128 0x7
 1779 0060 34       		.uleb128 0x34
 1780 0061 00       		.byte	0
 1781 0062 03       		.uleb128 0x3
 1782 0063 0E       		.uleb128 0xe
 1783 0064 3A       		.uleb128 0x3a
 1784 0065 0B       		.uleb128 0xb
 1785 0066 3B       		.uleb128 0x3b
 1786 0067 0B       		.uleb128 0xb
 1787 0068 49       		.uleb128 0x49
 1788 0069 13       		.uleb128 0x13
 1789 006a 02       		.uleb128 0x2
 1790 006b 17       		.uleb128 0x17
 1791 006c 00       		.byte	0
 1792 006d 00       		.byte	0
 1793 006e 08       		.uleb128 0x8
 1794 006f 05       		.uleb128 0x5
 1795 0070 00       		.byte	0
 1796 0071 03       		.uleb128 0x3
 1797 0072 0E       		.uleb128 0xe
 1798 0073 3A       		.uleb128 0x3a
 1799 0074 0B       		.uleb128 0xb
 1800 0075 3B       		.uleb128 0x3b
 1801 0076 0B       		.uleb128 0xb
 1802 0077 49       		.uleb128 0x49
 1803 0078 13       		.uleb128 0x13
 1804 0079 02       		.uleb128 0x2
 1805 007a 17       		.uleb128 0x17
 1806 007b 00       		.byte	0
 1807 007c 00       		.byte	0
 1808 007d 09       		.uleb128 0x9
 1809 007e 898201   		.uleb128 0x4109
 1810 0081 01       		.byte	0x1
 1811 0082 11       		.uleb128 0x11
 1812 0083 01       		.uleb128 0x1
 1813 0084 31       		.uleb128 0x31
 1814 0085 13       		.uleb128 0x13
 1815 0086 01       		.uleb128 0x1
 1816 0087 13       		.uleb128 0x13
 1817 0088 00       		.byte	0
 1818 0089 00       		.byte	0
 1819 008a 0A       		.uleb128 0xa
 1820 008b 8A8201   		.uleb128 0x410a
 1821 008e 00       		.byte	0
 1822 008f 02       		.uleb128 0x2
 1823 0090 18       		.uleb128 0x18
 1824 0091 9142     		.uleb128 0x2111
 1825 0093 18       		.uleb128 0x18
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 68


 1826 0094 00       		.byte	0
 1827 0095 00       		.byte	0
 1828 0096 0B       		.uleb128 0xb
 1829 0097 898201   		.uleb128 0x4109
 1830 009a 00       		.byte	0
 1831 009b 11       		.uleb128 0x11
 1832 009c 01       		.uleb128 0x1
 1833 009d 31       		.uleb128 0x31
 1834 009e 13       		.uleb128 0x13
 1835 009f 00       		.byte	0
 1836 00a0 00       		.byte	0
 1837 00a1 0C       		.uleb128 0xc
 1838 00a2 898201   		.uleb128 0x4109
 1839 00a5 01       		.byte	0x1
 1840 00a6 11       		.uleb128 0x11
 1841 00a7 01       		.uleb128 0x1
 1842 00a8 31       		.uleb128 0x31
 1843 00a9 13       		.uleb128 0x13
 1844 00aa 00       		.byte	0
 1845 00ab 00       		.byte	0
 1846 00ac 0D       		.uleb128 0xd
 1847 00ad 34       		.uleb128 0x34
 1848 00ae 00       		.byte	0
 1849 00af 03       		.uleb128 0x3
 1850 00b0 08       		.uleb128 0x8
 1851 00b1 3A       		.uleb128 0x3a
 1852 00b2 0B       		.uleb128 0xb
 1853 00b3 3B       		.uleb128 0x3b
 1854 00b4 0B       		.uleb128 0xb
 1855 00b5 49       		.uleb128 0x49
 1856 00b6 13       		.uleb128 0x13
 1857 00b7 02       		.uleb128 0x2
 1858 00b8 17       		.uleb128 0x17
 1859 00b9 00       		.byte	0
 1860 00ba 00       		.byte	0
 1861 00bb 0E       		.uleb128 0xe
 1862 00bc 2E       		.uleb128 0x2e
 1863 00bd 01       		.byte	0x1
 1864 00be 3F       		.uleb128 0x3f
 1865 00bf 19       		.uleb128 0x19
 1866 00c0 03       		.uleb128 0x3
 1867 00c1 0E       		.uleb128 0xe
 1868 00c2 3A       		.uleb128 0x3a
 1869 00c3 0B       		.uleb128 0xb
 1870 00c4 3B       		.uleb128 0x3b
 1871 00c5 05       		.uleb128 0x5
 1872 00c6 27       		.uleb128 0x27
 1873 00c7 19       		.uleb128 0x19
 1874 00c8 11       		.uleb128 0x11
 1875 00c9 01       		.uleb128 0x1
 1876 00ca 12       		.uleb128 0x12
 1877 00cb 06       		.uleb128 0x6
 1878 00cc 40       		.uleb128 0x40
 1879 00cd 18       		.uleb128 0x18
 1880 00ce 9742     		.uleb128 0x2117
 1881 00d0 19       		.uleb128 0x19
 1882 00d1 01       		.uleb128 0x1
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 69


 1883 00d2 13       		.uleb128 0x13
 1884 00d3 00       		.byte	0
 1885 00d4 00       		.byte	0
 1886 00d5 0F       		.uleb128 0xf
 1887 00d6 34       		.uleb128 0x34
 1888 00d7 00       		.byte	0
 1889 00d8 03       		.uleb128 0x3
 1890 00d9 08       		.uleb128 0x8
 1891 00da 3A       		.uleb128 0x3a
 1892 00db 0B       		.uleb128 0xb
 1893 00dc 3B       		.uleb128 0x3b
 1894 00dd 05       		.uleb128 0x5
 1895 00de 49       		.uleb128 0x49
 1896 00df 13       		.uleb128 0x13
 1897 00e0 02       		.uleb128 0x2
 1898 00e1 17       		.uleb128 0x17
 1899 00e2 00       		.byte	0
 1900 00e3 00       		.byte	0
 1901 00e4 10       		.uleb128 0x10
 1902 00e5 34       		.uleb128 0x34
 1903 00e6 00       		.byte	0
 1904 00e7 03       		.uleb128 0x3
 1905 00e8 08       		.uleb128 0x8
 1906 00e9 3A       		.uleb128 0x3a
 1907 00ea 0B       		.uleb128 0xb
 1908 00eb 3B       		.uleb128 0x3b
 1909 00ec 05       		.uleb128 0x5
 1910 00ed 49       		.uleb128 0x49
 1911 00ee 13       		.uleb128 0x13
 1912 00ef 02       		.uleb128 0x2
 1913 00f0 18       		.uleb128 0x18
 1914 00f1 00       		.byte	0
 1915 00f2 00       		.byte	0
 1916 00f3 11       		.uleb128 0x11
 1917 00f4 34       		.uleb128 0x34
 1918 00f5 00       		.byte	0
 1919 00f6 03       		.uleb128 0x3
 1920 00f7 0E       		.uleb128 0xe
 1921 00f8 3A       		.uleb128 0x3a
 1922 00f9 0B       		.uleb128 0xb
 1923 00fa 3B       		.uleb128 0x3b
 1924 00fb 05       		.uleb128 0x5
 1925 00fc 49       		.uleb128 0x49
 1926 00fd 13       		.uleb128 0x13
 1927 00fe 02       		.uleb128 0x2
 1928 00ff 17       		.uleb128 0x17
 1929 0100 00       		.byte	0
 1930 0101 00       		.byte	0
 1931 0102 12       		.uleb128 0x12
 1932 0103 2E       		.uleb128 0x2e
 1933 0104 01       		.byte	0x1
 1934 0105 3F       		.uleb128 0x3f
 1935 0106 19       		.uleb128 0x19
 1936 0107 03       		.uleb128 0x3
 1937 0108 0E       		.uleb128 0xe
 1938 0109 3A       		.uleb128 0x3a
 1939 010a 0B       		.uleb128 0xb
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 70


 1940 010b 3B       		.uleb128 0x3b
 1941 010c 05       		.uleb128 0x5
 1942 010d 27       		.uleb128 0x27
 1943 010e 19       		.uleb128 0x19
 1944 010f 49       		.uleb128 0x49
 1945 0110 13       		.uleb128 0x13
 1946 0111 11       		.uleb128 0x11
 1947 0112 01       		.uleb128 0x1
 1948 0113 12       		.uleb128 0x12
 1949 0114 06       		.uleb128 0x6
 1950 0115 40       		.uleb128 0x40
 1951 0116 18       		.uleb128 0x18
 1952 0117 9742     		.uleb128 0x2117
 1953 0119 19       		.uleb128 0x19
 1954 011a 01       		.uleb128 0x1
 1955 011b 13       		.uleb128 0x13
 1956 011c 00       		.byte	0
 1957 011d 00       		.byte	0
 1958 011e 13       		.uleb128 0x13
 1959 011f 05       		.uleb128 0x5
 1960 0120 00       		.byte	0
 1961 0121 03       		.uleb128 0x3
 1962 0122 0E       		.uleb128 0xe
 1963 0123 3A       		.uleb128 0x3a
 1964 0124 0B       		.uleb128 0xb
 1965 0125 3B       		.uleb128 0x3b
 1966 0126 05       		.uleb128 0x5
 1967 0127 49       		.uleb128 0x49
 1968 0128 13       		.uleb128 0x13
 1969 0129 02       		.uleb128 0x2
 1970 012a 17       		.uleb128 0x17
 1971 012b 00       		.byte	0
 1972 012c 00       		.byte	0
 1973 012d 14       		.uleb128 0x14
 1974 012e 34       		.uleb128 0x34
 1975 012f 00       		.byte	0
 1976 0130 03       		.uleb128 0x3
 1977 0131 0E       		.uleb128 0xe
 1978 0132 3A       		.uleb128 0x3a
 1979 0133 0B       		.uleb128 0xb
 1980 0134 3B       		.uleb128 0x3b
 1981 0135 05       		.uleb128 0x5
 1982 0136 49       		.uleb128 0x49
 1983 0137 13       		.uleb128 0x13
 1984 0138 00       		.byte	0
 1985 0139 00       		.byte	0
 1986 013a 15       		.uleb128 0x15
 1987 013b 34       		.uleb128 0x34
 1988 013c 00       		.byte	0
 1989 013d 03       		.uleb128 0x3
 1990 013e 0E       		.uleb128 0xe
 1991 013f 3A       		.uleb128 0x3a
 1992 0140 0B       		.uleb128 0xb
 1993 0141 3B       		.uleb128 0x3b
 1994 0142 05       		.uleb128 0x5
 1995 0143 49       		.uleb128 0x49
 1996 0144 13       		.uleb128 0x13
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 71


 1997 0145 02       		.uleb128 0x2
 1998 0146 18       		.uleb128 0x18
 1999 0147 00       		.byte	0
 2000 0148 00       		.byte	0
 2001 0149 16       		.uleb128 0x16
 2002 014a 05       		.uleb128 0x5
 2003 014b 00       		.byte	0
 2004 014c 03       		.uleb128 0x3
 2005 014d 08       		.uleb128 0x8
 2006 014e 3A       		.uleb128 0x3a
 2007 014f 0B       		.uleb128 0xb
 2008 0150 3B       		.uleb128 0x3b
 2009 0151 05       		.uleb128 0x5
 2010 0152 49       		.uleb128 0x49
 2011 0153 13       		.uleb128 0x13
 2012 0154 02       		.uleb128 0x2
 2013 0155 17       		.uleb128 0x17
 2014 0156 00       		.byte	0
 2015 0157 00       		.byte	0
 2016 0158 17       		.uleb128 0x17
 2017 0159 05       		.uleb128 0x5
 2018 015a 00       		.byte	0
 2019 015b 03       		.uleb128 0x3
 2020 015c 08       		.uleb128 0x8
 2021 015d 3A       		.uleb128 0x3a
 2022 015e 0B       		.uleb128 0xb
 2023 015f 3B       		.uleb128 0x3b
 2024 0160 05       		.uleb128 0x5
 2025 0161 49       		.uleb128 0x49
 2026 0162 13       		.uleb128 0x13
 2027 0163 02       		.uleb128 0x2
 2028 0164 18       		.uleb128 0x18
 2029 0165 00       		.byte	0
 2030 0166 00       		.byte	0
 2031 0167 18       		.uleb128 0x18
 2032 0168 01       		.uleb128 0x1
 2033 0169 01       		.byte	0x1
 2034 016a 49       		.uleb128 0x49
 2035 016b 13       		.uleb128 0x13
 2036 016c 01       		.uleb128 0x1
 2037 016d 13       		.uleb128 0x13
 2038 016e 00       		.byte	0
 2039 016f 00       		.byte	0
 2040 0170 19       		.uleb128 0x19
 2041 0171 21       		.uleb128 0x21
 2042 0172 00       		.byte	0
 2043 0173 49       		.uleb128 0x49
 2044 0174 13       		.uleb128 0x13
 2045 0175 2F       		.uleb128 0x2f
 2046 0176 0B       		.uleb128 0xb
 2047 0177 00       		.byte	0
 2048 0178 00       		.byte	0
 2049 0179 1A       		.uleb128 0x1a
 2050 017a 34       		.uleb128 0x34
 2051 017b 00       		.byte	0
 2052 017c 03       		.uleb128 0x3
 2053 017d 0E       		.uleb128 0xe
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 72


 2054 017e 3A       		.uleb128 0x3a
 2055 017f 0B       		.uleb128 0xb
 2056 0180 3B       		.uleb128 0x3b
 2057 0181 05       		.uleb128 0x5
 2058 0182 49       		.uleb128 0x49
 2059 0183 13       		.uleb128 0x13
 2060 0184 3F       		.uleb128 0x3f
 2061 0185 19       		.uleb128 0x19
 2062 0186 3C       		.uleb128 0x3c
 2063 0187 19       		.uleb128 0x19
 2064 0188 00       		.byte	0
 2065 0189 00       		.byte	0
 2066 018a 1B       		.uleb128 0x1b
 2067 018b 34       		.uleb128 0x34
 2068 018c 00       		.byte	0
 2069 018d 03       		.uleb128 0x3
 2070 018e 0E       		.uleb128 0xe
 2071 018f 3A       		.uleb128 0x3a
 2072 0190 0B       		.uleb128 0xb
 2073 0191 3B       		.uleb128 0x3b
 2074 0192 0B       		.uleb128 0xb
 2075 0193 49       		.uleb128 0x49
 2076 0194 13       		.uleb128 0x13
 2077 0195 3F       		.uleb128 0x3f
 2078 0196 19       		.uleb128 0x19
 2079 0197 02       		.uleb128 0x2
 2080 0198 18       		.uleb128 0x18
 2081 0199 00       		.byte	0
 2082 019a 00       		.byte	0
 2083 019b 1C       		.uleb128 0x1c
 2084 019c 26       		.uleb128 0x26
 2085 019d 00       		.byte	0
 2086 019e 49       		.uleb128 0x49
 2087 019f 13       		.uleb128 0x13
 2088 01a0 00       		.byte	0
 2089 01a1 00       		.byte	0
 2090 01a2 1D       		.uleb128 0x1d
 2091 01a3 2E       		.uleb128 0x2e
 2092 01a4 00       		.byte	0
 2093 01a5 3F       		.uleb128 0x3f
 2094 01a6 19       		.uleb128 0x19
 2095 01a7 3C       		.uleb128 0x3c
 2096 01a8 19       		.uleb128 0x19
 2097 01a9 6E       		.uleb128 0x6e
 2098 01aa 0E       		.uleb128 0xe
 2099 01ab 03       		.uleb128 0x3
 2100 01ac 0E       		.uleb128 0xe
 2101 01ad 3A       		.uleb128 0x3a
 2102 01ae 0B       		.uleb128 0xb
 2103 01af 3B       		.uleb128 0x3b
 2104 01b0 0B       		.uleb128 0xb
 2105 01b1 00       		.byte	0
 2106 01b2 00       		.byte	0
 2107 01b3 00       		.byte	0
 2108              		.section	.debug_loc,"",%progbits
 2109              	.Ldebug_loc0:
 2110              	.LLST0:
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 73


 2111 0000 06000000 		.4byte	.LVL1
 2112 0004 26000000 		.4byte	.LVL2
 2113 0008 0100     		.2byte	0x1
 2114 000a 52       		.byte	0x52
 2115 000b 00000000 		.4byte	0
 2116 000f 00000000 		.4byte	0
 2117              	.LLST1:
 2118 0013 00000000 		.4byte	.LVL3
 2119 0017 07000000 		.4byte	.LVL4-1
 2120 001b 0100     		.2byte	0x1
 2121 001d 50       		.byte	0x50
 2122 001e 07000000 		.4byte	.LVL4-1
 2123 0022 18000000 		.4byte	.LFE1
 2124 0026 0400     		.2byte	0x4
 2125 0028 F3       		.byte	0xf3
 2126 0029 01       		.uleb128 0x1
 2127 002a 50       		.byte	0x50
 2128 002b 9F       		.byte	0x9f
 2129 002c 00000000 		.4byte	0
 2130 0030 00000000 		.4byte	0
 2131              	.LLST2:
 2132 0034 02000000 		.4byte	.LVL7
 2133 0038 06000000 		.4byte	.LVL8
 2134 003c 0200     		.2byte	0x2
 2135 003e 30       		.byte	0x30
 2136 003f 9F       		.byte	0x9f
 2137 0040 06000000 		.4byte	.LVL8
 2138 0044 0E000000 		.4byte	.LVL10
 2139 0048 0100     		.2byte	0x1
 2140 004a 54       		.byte	0x54
 2141 004b 10000000 		.4byte	.LVL11
 2142 004f 16000000 		.4byte	.LFE2
 2143 0053 0100     		.2byte	0x1
 2144 0055 54       		.byte	0x54
 2145 0056 00000000 		.4byte	0
 2146 005a 00000000 		.4byte	0
 2147              	.LLST3:
 2148 005e 12000000 		.4byte	.LVL14
 2149 0062 34000000 		.4byte	.LVL18
 2150 0066 0100     		.2byte	0x1
 2151 0068 54       		.byte	0x54
 2152 0069 36000000 		.4byte	.LVL19
 2153 006d 3C000000 		.4byte	.LVL20
 2154 0071 0100     		.2byte	0x1
 2155 0073 54       		.byte	0x54
 2156 0074 00000000 		.4byte	0
 2157 0078 00000000 		.4byte	0
 2158              	.LLST4:
 2159 007c 1C000000 		.4byte	.LVL15
 2160 0080 28000000 		.4byte	.LVL16
 2161 0084 0100     		.2byte	0x1
 2162 0086 53       		.byte	0x53
 2163 0087 28000000 		.4byte	.LVL16
 2164 008b 34000000 		.4byte	.LVL18
 2165 008f 0700     		.2byte	0x7
 2166 0091 31       		.byte	0x31
 2167 0092 74       		.byte	0x74
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 74


 2168 0093 00       		.sleb128 0
 2169 0094 37       		.byte	0x37
 2170 0095 1A       		.byte	0x1a
 2171 0096 24       		.byte	0x24
 2172 0097 9F       		.byte	0x9f
 2173 0098 34000000 		.4byte	.LVL18
 2174 009c 36000000 		.4byte	.LVL19
 2175 00a0 0700     		.2byte	0x7
 2176 00a2 31       		.byte	0x31
 2177 00a3 74       		.byte	0x74
 2178 00a4 7F       		.sleb128 -1
 2179 00a5 37       		.byte	0x37
 2180 00a6 1A       		.byte	0x1a
 2181 00a7 24       		.byte	0x24
 2182 00a8 9F       		.byte	0x9f
 2183 00a9 00000000 		.4byte	0
 2184 00ad 00000000 		.4byte	0
 2185              	.LLST5:
 2186 00b1 00000000 		.4byte	.LVL21
 2187 00b5 2C000000 		.4byte	.LVL27
 2188 00b9 0100     		.2byte	0x1
 2189 00bb 50       		.byte	0x50
 2190 00bc 2C000000 		.4byte	.LVL27
 2191 00c0 40000000 		.4byte	.LVL29
 2192 00c4 0400     		.2byte	0x4
 2193 00c6 F3       		.byte	0xf3
 2194 00c7 01       		.uleb128 0x1
 2195 00c8 50       		.byte	0x50
 2196 00c9 9F       		.byte	0x9f
 2197 00ca 40000000 		.4byte	.LVL29
 2198 00ce 48000000 		.4byte	.LVL30
 2199 00d2 0100     		.2byte	0x1
 2200 00d4 50       		.byte	0x50
 2201 00d5 48000000 		.4byte	.LVL30
 2202 00d9 88000000 		.4byte	.LFE6
 2203 00dd 0400     		.2byte	0x4
 2204 00df F3       		.byte	0xf3
 2205 00e0 01       		.uleb128 0x1
 2206 00e1 50       		.byte	0x50
 2207 00e2 9F       		.byte	0x9f
 2208 00e3 00000000 		.4byte	0
 2209 00e7 00000000 		.4byte	0
 2210              	.LLST6:
 2211 00eb 04000000 		.4byte	.LVL22
 2212 00ef 74000000 		.4byte	.LVL33
 2213 00f3 0100     		.2byte	0x1
 2214 00f5 54       		.byte	0x54
 2215 00f6 00000000 		.4byte	0
 2216 00fa 00000000 		.4byte	0
 2217              	.LLST7:
 2218 00fe 18000000 		.4byte	.LVL24
 2219 0102 74000000 		.4byte	.LVL33
 2220 0106 0100     		.2byte	0x1
 2221 0108 57       		.byte	0x57
 2222 0109 00000000 		.4byte	0
 2223 010d 00000000 		.4byte	0
 2224              	.LLST8:
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 75


 2225 0111 1A000000 		.4byte	.LVL25
 2226 0115 2E000000 		.4byte	.LVL28
 2227 0119 0100     		.2byte	0x1
 2228 011b 51       		.byte	0x51
 2229 011c 2E000000 		.4byte	.LVL28
 2230 0120 40000000 		.4byte	.LVL29
 2231 0124 0800     		.2byte	0x8
 2232 0126 72       		.byte	0x72
 2233 0127 00       		.sleb128 0
 2234 0128 03       		.byte	0x3
 2235 0129 08000000 		.4byte	.LANCHOR0+8
 2236 012d 22       		.byte	0x22
 2237 012e 40000000 		.4byte	.LVL29
 2238 0132 4A000000 		.4byte	.LVL31
 2239 0136 0100     		.2byte	0x1
 2240 0138 51       		.byte	0x51
 2241 0139 4A000000 		.4byte	.LVL31
 2242 013d 6A000000 		.4byte	.LVL32
 2243 0141 0800     		.2byte	0x8
 2244 0143 72       		.byte	0x72
 2245 0144 00       		.sleb128 0
 2246 0145 03       		.byte	0x3
 2247 0146 08000000 		.4byte	.LANCHOR0+8
 2248 014a 22       		.byte	0x22
 2249 014b 00000000 		.4byte	0
 2250 014f 00000000 		.4byte	0
 2251              	.LLST9:
 2252 0153 1C000000 		.4byte	.LVL26
 2253 0157 74000000 		.4byte	.LVL33
 2254 015b 0100     		.2byte	0x1
 2255 015d 56       		.byte	0x56
 2256 015e 00000000 		.4byte	0
 2257 0162 00000000 		.4byte	0
 2258              	.LLST10:
 2259 0166 00000000 		.4byte	.LVL34
 2260 016a 08000000 		.4byte	.LVL36
 2261 016e 0100     		.2byte	0x1
 2262 0170 50       		.byte	0x50
 2263 0171 08000000 		.4byte	.LVL36
 2264 0175 2C000000 		.4byte	.LFE7
 2265 0179 0400     		.2byte	0x4
 2266 017b F3       		.byte	0xf3
 2267 017c 01       		.uleb128 0x1
 2268 017d 50       		.byte	0x50
 2269 017e 9F       		.byte	0x9f
 2270 017f 00000000 		.4byte	0
 2271 0183 00000000 		.4byte	0
 2272              	.LLST11:
 2273 0187 06000000 		.4byte	.LVL35
 2274 018b 1C000000 		.4byte	.LVL41
 2275 018f 0100     		.2byte	0x1
 2276 0191 54       		.byte	0x54
 2277 0192 1E000000 		.4byte	.LVL42
 2278 0196 26000000 		.4byte	.LVL43
 2279 019a 0100     		.2byte	0x1
 2280 019c 54       		.byte	0x54
 2281 019d 00000000 		.4byte	0
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 76


 2282 01a1 00000000 		.4byte	0
 2283              	.LLST12:
 2284 01a5 0E000000 		.4byte	.LVL37
 2285 01a9 26000000 		.4byte	.LVL43
 2286 01ad 0100     		.2byte	0x1
 2287 01af 55       		.byte	0x55
 2288 01b0 00000000 		.4byte	0
 2289 01b4 00000000 		.4byte	0
 2290              	.LLST13:
 2291 01b8 0E000000 		.4byte	.LVL37
 2292 01bc 10000000 		.4byte	.LVL38
 2293 01c0 0200     		.2byte	0x2
 2294 01c2 30       		.byte	0x30
 2295 01c3 9F       		.byte	0x9f
 2296 01c4 10000000 		.4byte	.LVL38
 2297 01c8 26000000 		.4byte	.LVL43
 2298 01cc 0100     		.2byte	0x1
 2299 01ce 56       		.byte	0x56
 2300 01cf 00000000 		.4byte	0
 2301 01d3 00000000 		.4byte	0
 2302              	.LLST14:
 2303 01d7 02000000 		.4byte	.LVL44
 2304 01db 08000000 		.4byte	.LVL45
 2305 01df 0200     		.2byte	0x2
 2306 01e1 30       		.byte	0x30
 2307 01e2 9F       		.byte	0x9f
 2308 01e3 08000000 		.4byte	.LVL45
 2309 01e7 14000000 		.4byte	.LVL48
 2310 01eb 0100     		.2byte	0x1
 2311 01ed 54       		.byte	0x54
 2312 01ee 16000000 		.4byte	.LVL49
 2313 01f2 1E000000 		.4byte	.LFE8
 2314 01f6 0100     		.2byte	0x1
 2315 01f8 54       		.byte	0x54
 2316 01f9 00000000 		.4byte	0
 2317 01fd 00000000 		.4byte	0
 2318              	.LLST15:
 2319 0201 02000000 		.4byte	.LVL44
 2320 0205 08000000 		.4byte	.LVL45
 2321 0209 0200     		.2byte	0x2
 2322 020b 30       		.byte	0x30
 2323 020c 9F       		.byte	0x9f
 2324 020d 08000000 		.4byte	.LVL45
 2325 0211 1E000000 		.4byte	.LFE8
 2326 0215 0100     		.2byte	0x1
 2327 0217 55       		.byte	0x55
 2328 0218 00000000 		.4byte	0
 2329 021c 00000000 		.4byte	0
 2330              	.LLST16:
 2331 0220 00000000 		.4byte	.LVL50
 2332 0224 08000000 		.4byte	.LVL52
 2333 0228 0100     		.2byte	0x1
 2334 022a 50       		.byte	0x50
 2335 022b 08000000 		.4byte	.LVL52
 2336 022f 38000000 		.4byte	.LFE9
 2337 0233 0400     		.2byte	0x4
 2338 0235 F3       		.byte	0xf3
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 77


 2339 0236 01       		.uleb128 0x1
 2340 0237 50       		.byte	0x50
 2341 0238 9F       		.byte	0x9f
 2342 0239 00000000 		.4byte	0
 2343 023d 00000000 		.4byte	0
 2344              	.LLST17:
 2345 0241 1A000000 		.4byte	.LVL55
 2346 0245 20000000 		.4byte	.LVL56
 2347 0249 0100     		.2byte	0x1
 2348 024b 52       		.byte	0x52
 2349 024c 20000000 		.4byte	.LVL56
 2350 0250 24000000 		.4byte	.LVL57
 2351 0254 0700     		.2byte	0x7
 2352 0256 31       		.byte	0x31
 2353 0257 73       		.byte	0x73
 2354 0258 00       		.sleb128 0
 2355 0259 37       		.byte	0x37
 2356 025a 1A       		.byte	0x1a
 2357 025b 24       		.byte	0x24
 2358 025c 9F       		.byte	0x9f
 2359 025d 24000000 		.4byte	.LVL57
 2360 0261 26000000 		.4byte	.LVL58
 2361 0265 0700     		.2byte	0x7
 2362 0267 31       		.byte	0x31
 2363 0268 73       		.byte	0x73
 2364 0269 7F       		.sleb128 -1
 2365 026a 37       		.byte	0x37
 2366 026b 1A       		.byte	0x1a
 2367 026c 24       		.byte	0x24
 2368 026d 9F       		.byte	0x9f
 2369 026e 00000000 		.4byte	0
 2370 0272 00000000 		.4byte	0
 2371              	.LLST18:
 2372 0276 06000000 		.4byte	.LVL51
 2373 027a 24000000 		.4byte	.LVL57
 2374 027e 0100     		.2byte	0x1
 2375 0280 53       		.byte	0x53
 2376 0281 26000000 		.4byte	.LVL58
 2377 0285 38000000 		.4byte	.LFE9
 2378 0289 0100     		.2byte	0x1
 2379 028b 53       		.byte	0x53
 2380 028c 00000000 		.4byte	0
 2381 0290 00000000 		.4byte	0
 2382              	.LLST19:
 2383 0294 0E000000 		.4byte	.LVL53
 2384 0298 2C000000 		.4byte	.LVL59
 2385 029c 0100     		.2byte	0x1
 2386 029e 55       		.byte	0x55
 2387 029f 00000000 		.4byte	0
 2388 02a3 00000000 		.4byte	0
 2389              	.LLST20:
 2390 02a7 00000000 		.4byte	.LVL60
 2391 02ab 08000000 		.4byte	.LVL62
 2392 02af 0100     		.2byte	0x1
 2393 02b1 50       		.byte	0x50
 2394 02b2 08000000 		.4byte	.LVL62
 2395 02b6 38000000 		.4byte	.LFE10
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 78


 2396 02ba 0400     		.2byte	0x4
 2397 02bc F3       		.byte	0xf3
 2398 02bd 01       		.uleb128 0x1
 2399 02be 50       		.byte	0x50
 2400 02bf 9F       		.byte	0x9f
 2401 02c0 00000000 		.4byte	0
 2402 02c4 00000000 		.4byte	0
 2403              	.LLST21:
 2404 02c8 1A000000 		.4byte	.LVL65
 2405 02cc 22000000 		.4byte	.LVL66
 2406 02d0 0100     		.2byte	0x1
 2407 02d2 52       		.byte	0x52
 2408 02d3 22000000 		.4byte	.LVL66
 2409 02d7 26000000 		.4byte	.LVL67
 2410 02db 0700     		.2byte	0x7
 2411 02dd 31       		.byte	0x31
 2412 02de 73       		.byte	0x73
 2413 02df 00       		.sleb128 0
 2414 02e0 37       		.byte	0x37
 2415 02e1 1A       		.byte	0x1a
 2416 02e2 24       		.byte	0x24
 2417 02e3 9F       		.byte	0x9f
 2418 02e4 26000000 		.4byte	.LVL67
 2419 02e8 28000000 		.4byte	.LVL68
 2420 02ec 0700     		.2byte	0x7
 2421 02ee 31       		.byte	0x31
 2422 02ef 73       		.byte	0x73
 2423 02f0 7F       		.sleb128 -1
 2424 02f1 37       		.byte	0x37
 2425 02f2 1A       		.byte	0x1a
 2426 02f3 24       		.byte	0x24
 2427 02f4 9F       		.byte	0x9f
 2428 02f5 00000000 		.4byte	0
 2429 02f9 00000000 		.4byte	0
 2430              	.LLST22:
 2431 02fd 06000000 		.4byte	.LVL61
 2432 0301 26000000 		.4byte	.LVL67
 2433 0305 0100     		.2byte	0x1
 2434 0307 53       		.byte	0x53
 2435 0308 28000000 		.4byte	.LVL68
 2436 030c 38000000 		.4byte	.LFE10
 2437 0310 0100     		.2byte	0x1
 2438 0312 53       		.byte	0x53
 2439 0313 00000000 		.4byte	0
 2440 0317 00000000 		.4byte	0
 2441              	.LLST23:
 2442 031b 0E000000 		.4byte	.LVL63
 2443 031f 2E000000 		.4byte	.LVL69
 2444 0323 0100     		.2byte	0x1
 2445 0325 55       		.byte	0x55
 2446 0326 00000000 		.4byte	0
 2447 032a 00000000 		.4byte	0
 2448              	.LLST24:
 2449 032e 00000000 		.4byte	.LVL70
 2450 0332 02000000 		.4byte	.LVL71
 2451 0336 0100     		.2byte	0x1
 2452 0338 50       		.byte	0x50
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 79


 2453 0339 02000000 		.4byte	.LVL71
 2454 033d 0C000000 		.4byte	.LFE11
 2455 0341 0400     		.2byte	0x4
 2456 0343 F3       		.byte	0xf3
 2457 0344 01       		.uleb128 0x1
 2458 0345 50       		.byte	0x50
 2459 0346 9F       		.byte	0x9f
 2460 0347 00000000 		.4byte	0
 2461 034b 00000000 		.4byte	0
 2462              	.LLST25:
 2463 034f 02000000 		.4byte	.LVL71
 2464 0353 06000000 		.4byte	.LVL72
 2465 0357 0100     		.2byte	0x1
 2466 0359 50       		.byte	0x50
 2467 035a 06000000 		.4byte	.LVL72
 2468 035e 0A000000 		.4byte	.LVL73
 2469 0362 0500     		.2byte	0x5
 2470 0364 70       		.byte	0x70
 2471 0365 00       		.sleb128 0
 2472 0366 32       		.byte	0x32
 2473 0367 25       		.byte	0x25
 2474 0368 9F       		.byte	0x9f
 2475 0369 00000000 		.4byte	0
 2476 036d 00000000 		.4byte	0
 2477              	.LLST26:
 2478 0371 00000000 		.4byte	.LVL74
 2479 0375 1C000000 		.4byte	.LVL79
 2480 0379 0100     		.2byte	0x1
 2481 037b 50       		.byte	0x50
 2482 037c 1C000000 		.4byte	.LVL79
 2483 0380 EC000000 		.4byte	.LFE4
 2484 0384 0400     		.2byte	0x4
 2485 0386 F3       		.byte	0xf3
 2486 0387 01       		.uleb128 0x1
 2487 0388 50       		.byte	0x50
 2488 0389 9F       		.byte	0x9f
 2489 038a 00000000 		.4byte	0
 2490 038e 00000000 		.4byte	0
 2491              	.LLST27:
 2492 0392 80000000 		.4byte	.LVL89
 2493 0396 88000000 		.4byte	.LVL90
 2494 039a 0500     		.2byte	0x5
 2495 039c 72       		.byte	0x72
 2496 039d 00       		.sleb128 0
 2497 039e 38       		.byte	0x38
 2498 039f 24       		.byte	0x24
 2499 03a0 9F       		.byte	0x9f
 2500 03a1 88000000 		.4byte	.LVL90
 2501 03a5 8A000000 		.4byte	.LVL91
 2502 03a9 0100     		.2byte	0x1
 2503 03ab 53       		.byte	0x53
 2504 03ac 8A000000 		.4byte	.LVL91
 2505 03b0 9E000000 		.4byte	.LVL93
 2506 03b4 0100     		.2byte	0x1
 2507 03b6 57       		.byte	0x57
 2508 03b7 00000000 		.4byte	0
 2509 03bb 00000000 		.4byte	0
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 80


 2510              	.LLST28:
 2511 03bf 3A000000 		.4byte	.LVL84
 2512 03c3 40000000 		.4byte	.LVL85
 2513 03c7 0100     		.2byte	0x1
 2514 03c9 55       		.byte	0x55
 2515 03ca 44000000 		.4byte	.LVL86
 2516 03ce CA000000 		.4byte	.LVL97
 2517 03d2 0100     		.2byte	0x1
 2518 03d4 55       		.byte	0x55
 2519 03d5 00000000 		.4byte	0
 2520 03d9 00000000 		.4byte	0
 2521              	.LLST29:
 2522 03dd 22000000 		.4byte	.LVL81
 2523 03e1 28000000 		.4byte	.LVL82
 2524 03e5 0100     		.2byte	0x1
 2525 03e7 50       		.byte	0x50
 2526 03e8 28000000 		.4byte	.LVL82
 2527 03ec 2B000000 		.4byte	.LVL83-1
 2528 03f0 0700     		.2byte	0x7
 2529 03f2 74       		.byte	0x74
 2530 03f3 00       		.sleb128 0
 2531 03f4 31       		.byte	0x31
 2532 03f5 24       		.byte	0x24
 2533 03f6 75       		.byte	0x75
 2534 03f7 00       		.sleb128 0
 2535 03f8 22       		.byte	0x22
 2536 03f9 00000000 		.4byte	0
 2537 03fd 00000000 		.4byte	0
 2538              	.LLST30:
 2539 0401 0A000000 		.4byte	.LVL75
 2540 0405 0E000000 		.4byte	.LVL76
 2541 0409 0100     		.2byte	0x1
 2542 040b 53       		.byte	0x53
 2543 040c 0E000000 		.4byte	.LVL76
 2544 0410 18000000 		.4byte	.LVL78
 2545 0414 0900     		.2byte	0x9
 2546 0416 73       		.byte	0x73
 2547 0417 00       		.sleb128 0
 2548 0418 03       		.byte	0x3
 2549 0419 00000000 		.4byte	.LANCHOR0
 2550 041d 1C       		.byte	0x1c
 2551 041e 9F       		.byte	0x9f
 2552 041f 3A000000 		.4byte	.LVL84
 2553 0423 40000000 		.4byte	.LVL85
 2554 0427 0200     		.2byte	0x2
 2555 0429 31       		.byte	0x31
 2556 042a 9F       		.byte	0x9f
 2557 042b 44000000 		.4byte	.LVL86
 2558 042f 48000000 		.4byte	.LVL87
 2559 0433 0200     		.2byte	0x2
 2560 0435 30       		.byte	0x30
 2561 0436 9F       		.byte	0x9f
 2562 0437 48000000 		.4byte	.LVL87
 2563 043b CA000000 		.4byte	.LVL97
 2564 043f 0100     		.2byte	0x1
 2565 0441 58       		.byte	0x58
 2566 0442 00000000 		.4byte	0
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 81


 2567 0446 00000000 		.4byte	0
 2568              	.LLST31:
 2569 044a 10000000 		.4byte	.LVL77
 2570 044e A0000000 		.4byte	.LVL94
 2571 0452 0100     		.2byte	0x1
 2572 0454 56       		.byte	0x56
 2573 0455 00000000 		.4byte	0
 2574 0459 00000000 		.4byte	0
 2575              	.LLST32:
 2576 045d 02000000 		.4byte	.LVL98
 2577 0461 06000000 		.4byte	.LVL99
 2578 0465 0200     		.2byte	0x2
 2579 0467 30       		.byte	0x30
 2580 0468 9F       		.byte	0x9f
 2581 0469 06000000 		.4byte	.LVL99
 2582 046d 20000000 		.4byte	.LVL102
 2583 0471 0100     		.2byte	0x1
 2584 0473 54       		.byte	0x54
 2585 0474 22000000 		.4byte	.LVL103
 2586 0478 28000000 		.4byte	.LVL104
 2587 047c 0100     		.2byte	0x1
 2588 047e 54       		.byte	0x54
 2589 047f 00000000 		.4byte	0
 2590 0483 00000000 		.4byte	0
 2591              	.LLST33:
 2592 0487 10000000 		.4byte	.LVL100
 2593 048b 1D000000 		.4byte	.LVL101-1
 2594 048f 0100     		.2byte	0x1
 2595 0491 53       		.byte	0x53
 2596 0492 1D000000 		.4byte	.LVL101-1
 2597 0496 20000000 		.4byte	.LVL102
 2598 049a 0700     		.2byte	0x7
 2599 049c 31       		.byte	0x31
 2600 049d 74       		.byte	0x74
 2601 049e 00       		.sleb128 0
 2602 049f 37       		.byte	0x37
 2603 04a0 1A       		.byte	0x1a
 2604 04a1 24       		.byte	0x24
 2605 04a2 9F       		.byte	0x9f
 2606 04a3 20000000 		.4byte	.LVL102
 2607 04a7 22000000 		.4byte	.LVL103
 2608 04ab 0700     		.2byte	0x7
 2609 04ad 31       		.byte	0x31
 2610 04ae 74       		.byte	0x74
 2611 04af 7F       		.sleb128 -1
 2612 04b0 37       		.byte	0x37
 2613 04b1 1A       		.byte	0x1a
 2614 04b2 24       		.byte	0x24
 2615 04b3 9F       		.byte	0x9f
 2616 04b4 00000000 		.4byte	0
 2617 04b8 00000000 		.4byte	0
 2618              		.section	.debug_aranges,"",%progbits
 2619 0000 74000000 		.4byte	0x74
 2620 0004 0200     		.2byte	0x2
 2621 0006 00000000 		.4byte	.Ldebug_info0
 2622 000a 04       		.byte	0x4
 2623 000b 00       		.byte	0
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 82


 2624 000c 0000     		.2byte	0
 2625 000e 0000     		.2byte	0
 2626 0010 00000000 		.4byte	.LFB0
 2627 0014 50000000 		.4byte	.LFE0-.LFB0
 2628 0018 00000000 		.4byte	.LFB1
 2629 001c 18000000 		.4byte	.LFE1-.LFB1
 2630 0020 00000000 		.4byte	.LFB2
 2631 0024 16000000 		.4byte	.LFE2-.LFB2
 2632 0028 00000000 		.4byte	.LFB3
 2633 002c 44000000 		.4byte	.LFE3-.LFB3
 2634 0030 00000000 		.4byte	.LFB6
 2635 0034 88000000 		.4byte	.LFE6-.LFB6
 2636 0038 00000000 		.4byte	.LFB7
 2637 003c 2C000000 		.4byte	.LFE7-.LFB7
 2638 0040 00000000 		.4byte	.LFB8
 2639 0044 1E000000 		.4byte	.LFE8-.LFB8
 2640 0048 00000000 		.4byte	.LFB9
 2641 004c 38000000 		.4byte	.LFE9-.LFB9
 2642 0050 00000000 		.4byte	.LFB10
 2643 0054 38000000 		.4byte	.LFE10-.LFB10
 2644 0058 00000000 		.4byte	.LFB11
 2645 005c 0C000000 		.4byte	.LFE11-.LFB11
 2646 0060 00000000 		.4byte	.LFB4
 2647 0064 EC000000 		.4byte	.LFE4-.LFB4
 2648 0068 00000000 		.4byte	.LFB5
 2649 006c 2C000000 		.4byte	.LFE5-.LFB5
 2650 0070 00000000 		.4byte	0
 2651 0074 00000000 		.4byte	0
 2652              		.section	.debug_ranges,"",%progbits
 2653              	.Ldebug_ranges0:
 2654 0000 00000000 		.4byte	.LFB0
 2655 0004 50000000 		.4byte	.LFE0
 2656 0008 00000000 		.4byte	.LFB1
 2657 000c 18000000 		.4byte	.LFE1
 2658 0010 00000000 		.4byte	.LFB2
 2659 0014 16000000 		.4byte	.LFE2
 2660 0018 00000000 		.4byte	.LFB3
 2661 001c 44000000 		.4byte	.LFE3
 2662 0020 00000000 		.4byte	.LFB6
 2663 0024 88000000 		.4byte	.LFE6
 2664 0028 00000000 		.4byte	.LFB7
 2665 002c 2C000000 		.4byte	.LFE7
 2666 0030 00000000 		.4byte	.LFB8
 2667 0034 1E000000 		.4byte	.LFE8
 2668 0038 00000000 		.4byte	.LFB9
 2669 003c 38000000 		.4byte	.LFE9
 2670 0040 00000000 		.4byte	.LFB10
 2671 0044 38000000 		.4byte	.LFE10
 2672 0048 00000000 		.4byte	.LFB11
 2673 004c 0C000000 		.4byte	.LFE11
 2674 0050 00000000 		.4byte	.LFB4
 2675 0054 EC000000 		.4byte	.LFE4
 2676 0058 00000000 		.4byte	.LFB5
 2677 005c 2C000000 		.4byte	.LFE5
 2678 0060 00000000 		.4byte	0
 2679 0064 00000000 		.4byte	0
 2680              		.section	.debug_line,"",%progbits
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 83


 2681              	.Ldebug_line0:
 2682 0000 30020000 		.section	.debug_str,"MS",%progbits,1
 2682      02006B00 
 2682      00000201 
 2682      FB0E0D00 
 2682      01010101 
 2683              	.LASF10:
 2684 0000 75696E74 		.ascii	"uint16\000"
 2684      313600
 2685              	.LASF41:
 2686 0007 66696C74 		.ascii	"filteredRawData\000"
 2686      65726564 
 2686      52617744 
 2686      61746100 
 2687              	.LASF55:
 2688 0017 43617053 		.ascii	"CapSense_hysteresis\000"
 2688      656E7365 
 2688      5F687973 
 2688      74657265 
 2688      73697300 
 2689              	.LASF51:
 2690 002b 43617053 		.ascii	"CapSense_sensorOnMask\000"
 2690      656E7365 
 2690      5F73656E 
 2690      736F724F 
 2690      6E4D6173 
 2691              	.LASF26:
 2692 0041 66696E67 		.ascii	"fingerThreshold\000"
 2692      65725468 
 2692      72657368 
 2692      6F6C6400 
 2693              	.LASF66:
 2694 0051 433A5C55 		.ascii	"C:\\Users\\saksh\\OneDrive\\Documents\\PSoC Creator"
 2694      73657273 
 2694      5C73616B 
 2694      73685C4F 
 2694      6E654472 
 2695 007f 5C67616D 		.ascii	"\\game\\endSemProject.cydsn\000"
 2695      655C656E 
 2695      6453656D 
 2695      50726F6A 
 2695      6563742E 
 2696              	.LASF7:
 2697 0099 6C6F6E67 		.ascii	"long long unsigned int\000"
 2697      206C6F6E 
 2697      6720756E 
 2697      7369676E 
 2697      65642069 
 2698              	.LASF50:
 2699 00b0 43617053 		.ascii	"CapSense_sensorSignal\000"
 2699      656E7365 
 2699      5F73656E 
 2699      736F7253 
 2699      69676E61 
 2700              	.LASF22:
 2701 00c6 43617053 		.ascii	"CapSense_InitializeEnabledBaselines\000"
 2701      656E7365 
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 84


 2701      5F496E69 
 2701      7469616C 
 2701      697A6545 
 2702              	.LASF43:
 2703 00ea 43617053 		.ascii	"CapSense_UpdateEnabledBaselines\000"
 2703      656E7365 
 2703      5F557064 
 2703      61746545 
 2703      6E61626C 
 2704              	.LASF6:
 2705 010a 6C6F6E67 		.ascii	"long long int\000"
 2705      206C6F6E 
 2705      6720696E 
 2705      7400
 2706              	.LASF0:
 2707 0118 7369676E 		.ascii	"signed char\000"
 2707      65642063 
 2707      68617200 
 2708              	.LASF36:
 2709 0124 43617053 		.ascii	"CapSense_DisableWidget\000"
 2709      656E7365 
 2709      5F446973 
 2709      61626C65 
 2709      57696467 
 2710              	.LASF31:
 2711 013b 72617749 		.ascii	"rawIndex\000"
 2711      6E646578 
 2711      00
 2712              	.LASF32:
 2713 0144 6E756D62 		.ascii	"numberOfSensors\000"
 2713      65724F66 
 2713      53656E73 
 2713      6F727300 
 2714              	.LASF33:
 2715 0154 73746174 		.ascii	"state\000"
 2715      6500
 2716              	.LASF4:
 2717 015a 6C6F6E67 		.ascii	"long int\000"
 2717      20696E74 
 2717      00
 2718              	.LASF34:
 2719 0163 43617053 		.ascii	"CapSense_CheckIsAnyWidgetActive\000"
 2719      656E7365 
 2719      5F436865 
 2719      636B4973 
 2719      416E7957 
 2720              	.LASF9:
 2721 0183 75696E74 		.ascii	"uint8\000"
 2721      3800
 2722              	.LASF13:
 2723 0189 646F7562 		.ascii	"double\000"
 2723      6C6500
 2724              	.LASF47:
 2725 0190 43617053 		.ascii	"CapSense_widgetNumber\000"
 2725      656E7365 
 2725      5F776964 
 2725      6765744E 
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 85


 2725      756D6265 
 2726              	.LASF11:
 2727 01a6 75696E74 		.ascii	"uint32\000"
 2727      333200
 2728              	.LASF27:
 2729 01ad 68797374 		.ascii	"hysteresis\000"
 2729      65726573 
 2729      697300
 2730              	.LASF37:
 2731 01b8 43617053 		.ascii	"CapSense_IIR4Filter\000"
 2731      656E7365 
 2731      5F494952 
 2731      3446696C 
 2731      74657200 
 2732              	.LASF60:
 2733 01cc 43617053 		.ascii	"CapSense_ScanSensor\000"
 2733      656E7365 
 2733      5F536361 
 2733      6E53656E 
 2733      736F7200 
 2734              	.LASF8:
 2735 01e0 756E7369 		.ascii	"unsigned int\000"
 2735      676E6564 
 2735      20696E74 
 2735      00
 2736              	.LASF5:
 2737 01ed 6C6F6E67 		.ascii	"long unsigned int\000"
 2737      20756E73 
 2737      69676E65 
 2737      6420696E 
 2737      7400
 2738              	.LASF49:
 2739 01ff 43617053 		.ascii	"CapSense_sensorBaselineLow\000"
 2739      656E7365 
 2739      5F73656E 
 2739      736F7242 
 2739      6173656C 
 2740              	.LASF58:
 2741 021a 43617053 		.ascii	"CapSense_rawDataIndex\000"
 2741      656E7365 
 2741      5F726177 
 2741      44617461 
 2741      496E6465 
 2742              	.LASF3:
 2743 0230 73686F72 		.ascii	"short unsigned int\000"
 2743      7420756E 
 2743      7369676E 
 2743      65642069 
 2743      6E7400
 2744              	.LASF19:
 2745 0243 73656E73 		.ascii	"sensor\000"
 2745      6F7200
 2746              	.LASF46:
 2747 024a 43617053 		.ascii	"CapSense_sensorEnableMask\000"
 2747      656E7365 
 2747      5F73656E 
 2747      736F7245 
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 86


 2747      6E61626C 
 2748              	.LASF38:
 2749 0264 43617053 		.ascii	"CapSense_UpdateSensorBaseline\000"
 2749      656E7365 
 2749      5F557064 
 2749      61746553 
 2749      656E736F 
 2750              	.LASF39:
 2751 0282 63616C63 		.ascii	"calc\000"
 2751      00
 2752              	.LASF63:
 2753 0287 43617053 		.ascii	"CapSense_CalculateThresholds\000"
 2753      656E7365 
 2753      5F43616C 
 2753      63756C61 
 2753      74655468 
 2754              	.LASF28:
 2755 02a4 6465626F 		.ascii	"debounce\000"
 2755      756E6365 
 2755      00
 2756              	.LASF16:
 2757 02ad 73697A65 		.ascii	"sizetype\000"
 2757      74797065 
 2757      00
 2758              	.LASF35:
 2759 02b6 43617053 		.ascii	"CapSense_EnableWidget\000"
 2759      656E7365 
 2759      5F456E61 
 2759      626C6557 
 2759      69646765 
 2760              	.LASF15:
 2761 02cc 6C6F6E67 		.ascii	"long double\000"
 2761      20646F75 
 2761      626C6500 
 2762              	.LASF18:
 2763 02d8 43617053 		.ascii	"CapSense_InitializeSensorBaseline\000"
 2763      656E7365 
 2763      5F496E69 
 2763      7469616C 
 2763      697A6553 
 2764              	.LASF29:
 2765 02fa 43617053 		.ascii	"CapSense_CheckIsSensorActive\000"
 2765      656E7365 
 2765      5F436865 
 2765      636B4973 
 2765      53656E73 
 2766              	.LASF23:
 2767 0317 656E4D61 		.ascii	"enMask\000"
 2767      736B00
 2768              	.LASF54:
 2769 031e 43617053 		.ascii	"CapSense_noiseThreshold\000"
 2769      656E7365 
 2769      5F6E6F69 
 2769      73655468 
 2769      72657368 
 2770              	.LASF53:
 2771 0336 43617053 		.ascii	"CapSense_fingerThreshold\000"
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 87


 2771      656E7365 
 2771      5F66696E 
 2771      67657254 
 2771      68726573 
 2772              	.LASF45:
 2773 034f 43617053 		.ascii	"CapSense_rawFilterData1\000"
 2773      656E7365 
 2773      5F726177 
 2773      46696C74 
 2773      65724461 
 2774              	.LASF12:
 2775 0367 666C6F61 		.ascii	"float\000"
 2775      7400
 2776              	.LASF30:
 2777 036d 43617053 		.ascii	"CapSense_CheckIsWidgetActive\000"
 2777      656E7365 
 2777      5F436865 
 2777      636B4973 
 2777      57696467 
 2778              	.LASF1:
 2779 038a 756E7369 		.ascii	"unsigned char\000"
 2779      676E6564 
 2779      20636861 
 2779      7200
 2780              	.LASF20:
 2781 0398 43617053 		.ascii	"CapSense_InitializeAllBaselines\000"
 2781      656E7365 
 2781      5F496E69 
 2781      7469616C 
 2781      697A6541 
 2782              	.LASF42:
 2783 03b8 6E6F6973 		.ascii	"noiseThreshold\000"
 2783      65546872 
 2783      6573686F 
 2783      6C6400
 2784              	.LASF2:
 2785 03c7 73686F72 		.ascii	"short int\000"
 2785      7420696E 
 2785      7400
 2786              	.LASF21:
 2787 03d1 77696467 		.ascii	"widget\000"
 2787      657400
 2788              	.LASF24:
 2789 03d8 6F6E4D61 		.ascii	"onMask\000"
 2789      736B00
 2790              	.LASF64:
 2791 03df 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2791      43313120 
 2791      352E342E 
 2791      31203230 
 2791      31363036 
 2792 0412 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2792      20726576 
 2792      6973696F 
 2792      6E203233 
 2792      37373135 
 2793 0445 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 88


 2793      66756E63 
 2793      74696F6E 
 2793      2D736563 
 2793      74696F6E 
 2794              	.LASF17:
 2795 046d 43617053 		.ascii	"CapSense_BaseInit\000"
 2795      656E7365 
 2795      5F426173 
 2795      65496E69 
 2795      7400
 2796              	.LASF52:
 2797 047f 43617053 		.ascii	"CapSense_lowBaselineResetCnt\000"
 2797      656E7365 
 2797      5F6C6F77 
 2797      42617365 
 2797      6C696E65 
 2798              	.LASF56:
 2799 049c 43617053 		.ascii	"CapSense_debounce\000"
 2799      656E7365 
 2799      5F646562 
 2799      6F756E63 
 2799      6500
 2800              	.LASF48:
 2801 04ae 43617053 		.ascii	"CapSense_sensorBaseline\000"
 2801      656E7365 
 2801      5F73656E 
 2801      736F7242 
 2801      6173656C 
 2802              	.LASF14:
 2803 04c6 63686172 		.ascii	"char\000"
 2803      00
 2804              	.LASF25:
 2805 04cb 6465626F 		.ascii	"debounceIndex\000"
 2805      756E6365 
 2805      496E6465 
 2805      7800
 2806              	.LASF65:
 2807 04d9 47656E65 		.ascii	"Generated_Source\\PSoC5\\CapSense_CSHL.c\000"
 2807      72617465 
 2807      645F536F 
 2807      75726365 
 2807      5C50536F 
 2808              	.LASF44:
 2809 0500 43617053 		.ascii	"CapSense_sensorRaw\000"
 2809      656E7365 
 2809      5F73656E 
 2809      736F7252 
 2809      617700
 2810              	.LASF62:
 2811 0513 43617053 		.ascii	"CapSense_ScanEnabledWidgets\000"
 2811      656E7365 
 2811      5F536361 
 2811      6E456E61 
 2811      626C6564 
 2812              	.LASF57:
 2813 052f 43617053 		.ascii	"CapSense_debounceCounter\000"
 2813      656E7365 
ARM GAS  C:\Users\saksh\AppData\Local\Temp\cch47gfZ.s 			page 89


 2813      5F646562 
 2813      6F756E63 
 2813      65436F75 
 2814              	.LASF40:
 2815 0548 74656D70 		.ascii	"tempRaw\000"
 2815      52617700 
 2816              	.LASF61:
 2817 0550 43617053 		.ascii	"CapSense_IsBusy\000"
 2817      656E7365 
 2817      5F497342 
 2817      75737900 
 2818              	.LASF59:
 2819 0560 43617053 		.ascii	"CapSense_numberOfSensors\000"
 2819      656E7365 
 2819      5F6E756D 
 2819      6265724F 
 2819      6653656E 
 2820              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
